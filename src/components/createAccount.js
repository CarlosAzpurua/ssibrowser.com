import React, { useState } from "react";
import { Link, withRouter } from "react-router-dom";
import Arweave from 'arweave';
import { ConnectWallet, permawalletTemplateID } from ".";
import * as DKMS from '../lib/dkms';
import * as TR from "../lib/travel-rule-passport";
import * as SmartWeave from 'smartweave';

function CreateAccount({ username, domain, pscMember, wallet }) {
    const message = {
        firstName: "",
        lastName: "",
        streetName: "",
        buildingNumber: "",
        country: ""
    };
    const[ivms101, setIvms101] = useState(message);
    
    const[firstName, setFirstName] = useState('');
    const[lastName, setLastName] = useState('');
    const[streetName, setStreetName] = useState('');
    const[buildingNumber, setBuildingNumber] = useState('');
    const[country, setCountry] = useState('');

    const handleFirstName = event => {
        setFirstName(event.target.value);
    };
    const handleLastName = event => {
        setLastName(event.target.value);
    };
    const handleStreetName = event => {
        setStreetName(event.target.value);
    };
    const handleBuildingNumber = event => {
        setBuildingNumber(event.target.value);
    };
    const handleCountry = event => {
        setCountry(event.target.value);
    };

	return(
		<div id="main" style={{ marginTop: "4%", width: "100%"}} >
            <h3 style={{ width: "100%"}} >{ username }.{ domain } is available</h3>
            <section style={{ width: "100%" }}>
                <h4 class="major">Generate your Travel Rule SSI Passport</h4>
                <p>Create an <a href="https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf">IVMS101 message</a> for KYC to make your self-hosted wallet compliant with the FATF Travel Rule to counteract money laundering and terrorism financing, and thus building a web of trust. This personal information will get encrypted by an SSI Travel Rule Key generated by your SSI Permawallet - only you decide who can read this message. You won't need to give this information anymore to other third parties, over and over again. Your Travel Rule SSI (private) Key will get encrypted by your SSI Permaweb Key and saved into your wallet, so only you can access it. When making a transfer, you will have the option to attach this secret encrypted by the beneficiary's SSI Communication Key so they can read your Travel Rule Passport.</p>
                    <form>
                        <div class="fields">
                            <div class="field half">
                                <label>First name</label>
                                <input type="text" onChange={ handleFirstName } />
                            </div>
                            <div class="field half">
                                <label>Last name</label>
                                <input type="text" onChange={ handleLastName } />
                            </div>
                        </div>
                        <section style={{width:'100%', marginBottom:"3%"}}>
                            <h4>Residential address</h4>
                            <div class="fields">
                                <input type="text" placeholder="Street name" onChange={ handleStreetName } />
                            </div>
                        </section>
                        <div class="fields">
                            <div class="field half">
                                <input type="text" placeholder="Building number" onChange={ handleBuildingNumber } />
                            </div>
                            <div class="field half">
                                <select onChange={ handleCountry }>
                                    <option value="" disabled selected>Select country of residence</option>
                                    <option value="Argentina">Argentina</option>
                                    <option value="Denmark">Denmark</option>
                                    <option value="Singapore">Singapore</option>
                                    <option value="United Kingdom">United Kingdom</option>
                                </select>
                            </div>
                        </div>
                        <ul class="actions">
                            <li><input class="button primary" type="button" value="Save Travel Rule SSI Passport"
                                    onClick={ () => {
                                        setIvms101({
                                            firstName: firstName,
                                            lastName: lastName,
                                            streetName: streetName,
                                            buildingNumber: buildingNumber,
                                            country: country
                                        })
                                        alert("Information received.")
                                    }}
                                    />
                            </li>
                            <li><input type="reset" value="Reset" /></li>
                        </ul>
                    </form>
            </section>
            <section style={{ width: "100%" }}>
                <h4 class="major">Deploy your SSI Permawallet smart contract</h4>
                <input type="button" class="button primary" value="Create your Self-Sovereign Identity Permawallet"
                    onClick={ async() => {
                        try {
                            if( !wallet.key ) {
                                throw new Error(`At this version, there is a bug in ArConnect that prevents signing transactions - but their team will fix it soon! In the meantime, you have to choose a keyfile.`);
                            }
                            const arweave = Arweave.init({
                                host: 'arweave.net',
                                port: 443,
                                protocol: 'https'
                            });
                            // SSI Communication Keys
                            const ssiCommKeys = await DKMS.generateSsiKeys(arweave);
                                
                            // Travel Rule Passport
                            const trSsiKeys = await DKMS.generateSsiKeys(arweave);
                            const encryptedTrPassport = await TR.encryptTravelRulePassport(ivms101, trSsiKeys.publicEncryption);
                            alert(wallet.arConnect);
                            
                            const encryptedTrSsiKey = await DKMS.encryptKey(wallet.arConnect, trSsiKeys.privateKey);
                            alert(encryptedTrSsiKey);
                            
                            /*For testing
                            const decryptedTrSsiKey = await DKMS.decryptKey(wallet.arConnect, encryptedTrSsiKey);
                            alert(`TR decrypted key: ${decryptedTrSsiKey}`);
    
                            const decryptedTrPassport = await TR.decryptTravelRulePassport(encryptedTrPassport, trSsiKeys.privateKey);
                            alert(decryptedTrPassport);*/
                            
                            let permawalletInitState = await SmartWeave.readContract(arweave, permawalletTemplateID);
                            permawalletInitState.ssi = await arweave.wallets.jwkToAddress(wallet.key)
                            permawalletInitState.comm = ssiCommKeys.publicEncryption;
                            permawalletInitState.trp.message = encryptedTrPassport;
                            permawalletInitState.trp.key = encryptedTrSsiKey;
                            alert(JSON.stringify(permawalletInitState));
                            
                            // Fee paid to the PSC
    
                            const fee = arweave.ar.arToWinston('0.1');
    
                            if (window.confirm("The fee to create your SSI Permawallet is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.")) {
                                const tx = await arweave.createTransaction({
                                    target: pscMember,
                                    quantity: fee
                                });
    
                                await arweave.transactions.sign(tx, wallet.key);
                                
                                await arweave.transactions.post(tx);
                                alert("Payment successful.");
                            }
    
                            const permawalletID = await DKMS.createPermawallet(arweave, wallet.arConnect, permawalletInitState, permawalletTemplateID, wallet.key);
                            alert(`Success! Your permawallet ID is: ${permawalletID}`);                            
                        } catch (error) {
                            alert(error)
                        }
                    }}
                />
            </section>                        
        </div>
	);
}

export default withRouter(CreateAccount);
