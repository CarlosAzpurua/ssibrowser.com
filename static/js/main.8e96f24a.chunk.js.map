{"version":3,"sources":["context/user/types.ts","context/user/index.ts","constants/routes.ts","context/index.tsx","utils/context.ts","components/Header/index.tsx","components/Footer/index.tsx","components/Home/index.tsx","components/Domains/index.tsx","components/Contact/index.tsx","components/Profile/index.tsx","constants/arconnect.ts","context/user/actions.ts","hooks/useAuthentication.ts","components/ArConnect/index.tsx","components/ConnectWallet/index.tsx","components/createAccount.js","config/arweave.ts","components/KeyFile/index.tsx","components/settings.js","constants/tyron.ts","constants/domains.ts","components/SearchBar/index.tsx","App.tsx","reportWebVitals.js","index.tsx","components/SearchBar/styles.module.scss","components/Home/styles.module.scss"],"names":["ACTION_TYPES","Routes","userReducer","state","action","type","SET_AR_ADDRESS","address","payload","CLEAR_AR_ADDRESS","globalState","user","arweaveSecretKey","zilliqaSecretKey","defaultState","defaultDispatcher","stateContext","createContext","dispatchContext","useDispatch","useContext","useSelector","selector","contextFactory","globalReducer","Header","id","className","Footer","style","marginTop","href","Home","styles","container","nav","to","Domains","useState","username","setUsername","domain","setDomain","taken","setTaken","handleReset","console","log","role","aria-label","marginBottom","width","textAlign","onChange","onSubmit","e","preventDefault","value","target","test","length","htmlFor","onClick","Contact","listStyle","Profile","PERMISSIONS_TYPES","actionsCreator","adress","PERMISSIONS","ACCESS_ADDRESS","SIGN_TRANSACTION","ENCRYPT","DECRYPT","useAuthentication","arConnect","useArConnect","dispatch","walletSwitchListener","useCallback","detail","useEffect","a","getPermissions","includes","getActiveAddress","window","addEventListener","removeEventListener","connect","callback","warn","disconnect","isAuthenticated","isArConnectInstalled","ArConnect","button","ConnectWallet","CreateAccount","arweave","Arweave","init","host","port","protocol","KeyFile","keyFile","setKeyFile","handleSaveFile","wallets","jwkToAddress","files","currentTarget","file","fileReader","FileReader","onload","result","JSON","parse","readAsText","Settings","SMART_CONTRACTS","BASE_URL","DOMAINS","VALID_SMART_CONTRACTS","INIT","DID","xWALLET","SSI","PST","PSTi","xPSTi","pWALLET","SMART_CONTRACTS_URLS","SearchBar","setValue","name","setName","error","setError","searchBar","onKeyPress","key","TYRON","open","split","errorMsg","App","useReducer","Provider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8e96f24a.chunk.js","sourcesContent":["import { TNullable } from '../../interfaces/IData';\n\nexport enum ACTION_TYPES {\n  SET_AR_ADDRESS = \"SET_AR_ADDRESS\",\n  CLEAR_AR_ADDRESS = \"CLEAR_AR_ADDRESS\",\n  SET_AR_SECRET_KEY = 'SET_AR_SECRET_KEY',\n  CLEAR_AR_SECRET_KEY = \"CLEAR_AR_SECRET_KEY\",\n  SET_ZIL_SECRET_KEY = 'SET_ZIL_SECRET_KEY',\n  CLEAR_ZIL_SECRET_KEY = \"CLEAR_ZIL_SECRET_KEY\"\n}\n\nexport type TUserAction =\n  | {\n      type: ACTION_TYPES.SET_AR_ADDRESS;\n      payload: string;\n    }\n  | {\n      type: ACTION_TYPES.CLEAR_AR_ADDRESS;\n    }\n  | {\n    type: ACTION_TYPES.SET_AR_SECRET_KEY;\n    payload: string;\n  }\n  | {\n    type: ACTION_TYPES.CLEAR_AR_SECRET_KEY;\n  }\n  | {\n    type: ACTION_TYPES.SET_ZIL_SECRET_KEY;\n    payload: string;\n  }\n  | {\n    type: ACTION_TYPES.CLEAR_ZIL_SECRET_KEY;\n  };\n\nexport interface IActionsCreator {\n  setArAddress(address: string): TUserAction;\n  clearArAddress(): TUserAction;\n  setArSecretKey(key: string): TUserAction;\n  clearArSecretKey(): TUserAction;\n  setZilSecretKey(key: string): TUserAction;\n  clearZilSecretKey(): TUserAction;\n}\n\nexport type TUserState = Readonly<{\n  address: TNullable<string>;\n  arweaveSecretKey: TNullable<string>;\n  zilliqaSecretKey: TNullable<string>;\n}>;\n","import { TUserState, TUserAction, ACTION_TYPES } from './types';\n\nexport const userState: TUserState = {\n  address: null,\n  arweaveSecretKey: null,\n  zilliqaSecretKey: null\n};\n\nexport const userReducer = (state: TUserState, action: TUserAction) => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_AR_ADDRESS:\n      return { ...state, address: action.payload };\n    case ACTION_TYPES.CLEAR_AR_ADDRESS:\n      return { ...state, address: null }\n    default:\n      return state;\n  }\n};\n","enum Routes {\n  Home = '/',\n  Domains = '/domains',\n  Contact = '/contact'\n}\n\nexport default Routes;\n","import { userState, userReducer } from './user';\nimport { TUserState, TUserAction } from './user/types';\n\nimport { contextFactory } from \"../utils/context\";\n\nexport type TGlobalState = Readonly<{\n  user: TUserState;\n}>;\n\nexport const globalState: TGlobalState = {\n  user: userState\n};\n\nexport const { useDispatch, useSelector, stateContext, dispatchContext } =\n  contextFactory(globalState);\n\nexport const globalReducer = (state: TGlobalState, action: unknown): TGlobalState => ({\n  user: userReducer(state.user, action as TUserAction)\n});\n","import { createContext, Dispatch, useContext } from 'react';\n\nexport const contextFactory = <State, Action>(defaultState: State) => {\n  const defaultDispatcher: Dispatch<Action> = () => ({});\n\n  const stateContext = createContext<State>(defaultState);\n  const dispatchContext = createContext<Dispatch<any>>(defaultDispatcher);\n\n  const useDispatch = () => {\n    const dispatch = useContext(dispatchContext);\n    return dispatch;\n  };\n\n  const useSelector = <T>(selector: (state: State) => T) => {\n    const state = useContext(stateContext);\n    return selector(state);\n  };\n\n  return { useDispatch, useSelector, stateContext, dispatchContext };\n};\n","import React from \"react\";\n\nimport { SearchBar }  from '../index';\n\nfunction Header() {\n  return (\n    <div id=\"header\">\n      <div className=\"content\">\n        <div className=\"inner\">\n          <SearchBar />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer id=\"footer\">\n      <ul className=\"icons\" style={{ marginTop: \"0.5%\" }}>\n        <li>\n          <a\n            href=\"https://github.com/Zillacracy-org/ssibrowser.com\"\n            className=\"icon brands fa-github\"\n          >\n            <span className=\"label\">GitHub</span>\n          </a>\n        </li>\n      </ul>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport styles from './styles.module.scss';\n\nfunction Home() {\n  return (\n    <div id=\"header\" className={styles.container}>\n      <nav className={styles.nav}>\n        <ul>\n          <li>\n            <Link to=\"/domains\">Domains</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Join us</Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { ConnectWallet } from \"../index\";\n\nfunction Domains() {\n  const [username, setUsername] = useState(\"\");\n  const [domain, setDomain] = useState(\"mapu\");\n  const [taken, setTaken] = useState(\"no\");\n\n  const handleUsername = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n    // @TODO: Improve this to show an error if conditions aren't met.\n    const regex = /^[\\w\\d_]+$/;\n    if (!regex.test(value) || value.length < 5 || value.length > 15) {\n    } else {\n      setUsername(value);\n    }\n  };\n\n  const handleDomain = ({ target: { value } }: React.ChangeEvent<HTMLSelectElement>) => setDomain(value);\n\n  const handleReset = () => {\n    setTaken(\"no\");\n  };\n\n  console.log()\n\n  return (\n    <div id=\"main\">\n      <span\n        role=\"img\"\n        aria-label=\"back arrow\"\n        style={{ marginTop: \"7%\", marginBottom: \"2%\" }}\n      >\n        <Link to=\"/\">🔙</Link>\n      </span>\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }}>Domains</h2>\n      <section style={{ width: \"100%\" }}>\n        <p>\n          Search for a <i>username.domain</i> to access its public profile - or\n          if it's available, you can register it!\n        </p>\n        <div className=\"table-wrapper\">\n          <table>\n            <thead>\n              <tr>\n                <th>Domain</th>\n                <th>For</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>.ssi</td>\n                <td>Self-sovereign digital identities</td>\n              </tr>\n              <tr>\n                <td>.did</td>\n                <td>Decentralized identifier smart contracts</td>\n              </tr>\n              <tr>\n                <td>.mapu</td>\n                <td>Self-sovereign decentralized communities</td>\n              </tr>\n\n              <tr>\n                <td>.agent</td>\n                <td>SSI Agents</td>\n              </tr>\n              <tr>\n                <td>.tyron</td>\n                <td>Tyron smart contracts</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <form onChange={handleReset} onSubmit={(e) => e.preventDefault()}>\n          <div className=\"fields\">\n            <div className=\"field half\">\n              <label>Username</label>\n              <input type=\"text\" onChange={handleUsername} />\n            </div>\n            <div className=\"field half\">\n              <label htmlFor=\"domain\">Domain</label>\n              <select onChange={handleDomain}>\n                <option value=\"mapu\">.mapu</option>\n              </select>\n            </div>\n          </div>\n          <ul className=\"actions\">\n            <li>\n              <input\n                className=\"button primary\"\n                type=\"button\"\n                value=\"Search\"\n                onClick={() => {\n                  // @TODO: Implement this once zilliqa contracts are done\n                }}\n              />\n            </li>\n            <li>\n              <input type=\"reset\" value=\"Reset\" onClick={handleReset} />\n            </li>\n          </ul>\n        </form>\n      </section>\n      <section style={{ width: \"100%\" }}>\n        {username !== \"\" && (\n          <ConnectWallet\n            taken={taken}\n            username={username}\n            domain={domain}\n          />\n        )}\n      </section>\n    </div>\n  );\n}\n\nexport default Domains;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Contact() {\n  return (\n    <div id=\"main\">\n      <span\n        role=\"img\"\n        aria-label=\"back arrow\"\n        style={{ marginTop: \"7%\", marginBottom: \"2%\" }}\n      >\n        <Link to=\"/\">🔙</Link>\n      </span>\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }}>Join us</h2>\n      <section style={{ width: \"100%\", textAlign: \"center\" }}>\n        <ul style={{ listStyle: \"none\" }}>\n          <li>\n            <a href=\"https://ssiprotocol.com\">www.ssiprotocol.com</a>\n          </li>\n          <li>\n            <a href=\"https://https://zillacracy.com/\">www.zillacracy.com</a>\n          </li>\n          <li>\n            <a\n              href=\"https://discord.gg/FMAUh4ZNwZ\"\n              className=\"icon brands fa-discord\"\n            >\n              <span className=\"label\">Discord</span>\n            </a>{\" \"}\n            Join the Zilliqa server and find the <code>tyron-ssi-protocol</code>{\" \"}\n            channel in Zilgineers\n          </li>\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React, { useState } from \"react\";\nimport Arweave from \"arweave\";\nimport * as SmartWeave from \"smartweave\";\nimport * as DKMS from \"../../lib/dkms\";\n\n\nexport interface IProfile {\n  username: string;\n  domain: string;\n  // @TODO: Modify this to be more specific\n  account: any;\n  arweave: any;\n  arconnect: any;\n  keyfile: any;\n}\n\nfunction Profile({\n  username,\n  domain,\n  account,\n  arweave,\n  arconnect,\n  keyfile,\n}: IProfile) {\n  const [donationAmount, setDonationAmount] = useState(\"\");\n  const handleDonationAmount = (event: React.ChangeEvent<HTMLInputElement>) => setDonationAmount(event.target.value);\n\n  const [message, setMessage] = useState(\"\");\n\n  const handleMessage = (event: React.ChangeEvent<HTMLTextAreaElement>) => setMessage(event.target.value);\n\n  return (\n    <div id=\"main\">\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }} className=\"major\">\n        public profile of {username}.{domain}\n      </h2>\n      <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n        <h4 className=\"major\">Articles</h4>\n        <p>Coming soon!</p>\n      </section>\n      <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n        <h4 className=\"major\">Donations</h4>\n        <p>Show your support:</p>\n        <form>\n          <div className=\"fields\">\n            <div className=\"field half\">\n              <input\n                type=\"text\"\n                placeholder=\"Amount\"\n                onChange={handleDonationAmount}\n              />\n            </div>\n            <div className=\"field half\">\n              <input\n                type=\"button\"\n                className=\"button primary\"\n                value=\"Donate $AR\"\n                onClick={async () => {\n                  try {\n                    if (keyfile === \"\" && arconnect === \"\") {\n                      throw new Error(\n                        `You have to connect with ArConnect or your keyfile.`\n                      );\n                    }\n                    if (\n                      window.confirm(\n                        `You are about to donate ${donationAmount} $AR to '${username}.${domain}'. Click OK to proceed.`\n                      )\n                    ) {\n                      let tx;\n                      if (arconnect !== \"\") {\n                        tx = await arweave.createTransaction({\n                          target: account.ssi,\n                          quantity: arweave.ar.arToWinston(donationAmount),\n                        });\n                        await arweave.transactions.sign(tx);\n                      } else {\n                        tx = await arweave.createTransaction(\n                          {\n                            target: account.ssi,\n                            quantity: arweave.ar.arToWinston(donationAmount),\n                          },\n                          keyfile\n                        );\n                        await arweave.transactions.sign(tx, keyfile);\n                      }\n                      const result = await arweave.transactions.post(tx);\n                      alert(`Transaction: ${tx}. Status: ${result.status}`);\n                    }\n                  } catch (error) {\n                    alert(error);\n                  }\n                }}\n              />\n            </div>\n          </div>\n        </form>\n      </section>\n      {account.wallet !== \"\" && (\n        <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n          <h4 className=\"major\">SSI Communication</h4>\n          <p>Send them an encrypted message:</p>\n          <form method=\"post\" action=\"#\">\n            <div className=\"fields\">\n              <div className=\"field\">\n                <textarea onChange={handleMessage} rows={4}></textarea>\n              </div>\n            </div>\n            <ul className=\"actions\">\n              <li>\n                <input\n                  type=\"button\"\n                  className=\"button primary\"\n                  value=\"Encrypt & send\"\n                  onClick={async () => {\n                    try {\n                      if (keyfile === \"\" && arconnect === \"\") {\n                        throw new Error(\n                          `You have to connect with ArConnect or your keyfile.`\n                        );\n                      }\n\n                      const userPermawallet = await SmartWeave.readContract(\n                        arweave,\n                        account.wallet\n                      );\n                      const userSsiComm = userPermawallet.ssiComm;\n                      const encryptedMessage = await DKMS.encryptData(\n                        message,\n                        userSsiComm\n                      );\n\n                      if (\n                        window.confirm(\n                          `You are about to send a message to ${username}.${domain}'. Click OK to proceed.`\n                        )\n                      ) {\n                        let tx;\n                        if (arconnect !== \"\") {\n                          tx = await arweave.createTransaction({\n                            target: account.ssi,\n                            data: Arweave.utils.concatBuffers([\n                              encryptedMessage,\n                            ]),\n                            quantity: arweave.ar.arToWinston(\"0\"),\n                          });\n                          await arweave.transactions.sign(tx);\n                        } else {\n                          tx = await arweave.createTransaction(\n                            {\n                              target: account.ssi,\n                              data: Arweave.utils.concatBuffers([\n                                encryptedMessage,\n                              ]),\n                              quantity: arweave.ar.arToWinston(\"0\"),\n                            },\n                            keyfile\n                          );\n                          await arweave.transactions.sign(tx, keyfile);\n                        }\n                        const result = await arweave.transactions.post(tx);\n                        alert(\n                          `Transaction: ${JSON.stringify(tx)}. Status: ${\n                            result.status\n                          }`\n                        );\n                      }\n                    } catch (error) {\n                      alert(error);\n                    }\n                  }}\n                />\n              </li>\n              <li>\n                <input type=\"reset\" value=\"Reset\" />\n              </li>\n            </ul>\n          </form>\n        </section>\n      )}\n    </div>\n  );\n}\n\nexport default Profile;\n","export enum PERMISSIONS_TYPES {\n  ACCESS_ADDRESS = 'ACCESS_ADDRESS',\n  SIGN_TRANSACTION = 'SING_TRANSACTION',\n  ENCRYPT = 'ENCRYPT',\n  DECRYPT = 'DECRYPT'\n}\n\nexport const PERMISSIONS: Array<PERMISSIONS_TYPES> = [\n  PERMISSIONS_TYPES.ACCESS_ADDRESS,\n  PERMISSIONS_TYPES.SIGN_TRANSACTION,\n  PERMISSIONS_TYPES.ENCRYPT,\n  PERMISSIONS_TYPES.DECRYPT\n];\n","import { ACTION_TYPES, IActionsCreator } from './types';\n\nexport const actionsCreator: IActionsCreator = {\n  setArAddress: (adress: string) => ({\n    type: ACTION_TYPES.SET_AR_ADDRESS,\n    payload: adress\n  }),\n  clearArAddress: () => ({\n    type: ACTION_TYPES.CLEAR_AR_ADDRESS\n  }),\n  setArSecretKey: (key: string) => ({\n    type: ACTION_TYPES.SET_AR_SECRET_KEY,\n    payload: key\n  }),\n  clearArSecretKey: () => ({\n    type: ACTION_TYPES.CLEAR_AR_SECRET_KEY,\n  }),\n  setZilSecretKey: (key: string) => ({\n    type: ACTION_TYPES.SET_ZIL_SECRET_KEY,\n    payload: key\n  }),\n  clearZilSecretKey: () => ({\n    type: ACTION_TYPES.CLEAR_ZIL_SECRET_KEY\n  })\n}\n","import { useEffect, useCallback } from \"react\";\nimport useArConnect from \"use-arconnect\";\n\nimport { useDispatch, useSelector } from \"../context\";\nimport { actionsCreator } from \"../context/user/actions\";\nimport { PERMISSIONS_TYPES, PERMISSIONS } from \"../constants/arconnect\";\n\nfunction useAuthentication() {\n  const arConnect = useArConnect();\n  const dispatch = useDispatch();\n  const { address } = useSelector((state) => state.user);\n\n  const walletSwitchListener = useCallback(\n    (e: any) => dispatch(actionsCreator.setArAddress(e.detail.address)),\n    [dispatch]\n  );\n\n  // Gets address if permissions are already granted.\n  useEffect(() => {\n    if (arConnect) {\n      (async () => {\n        try {\n          const permissions = await arConnect.getPermissions();\n          if (permissions.includes(PERMISSIONS_TYPES.ACCESS_ADDRESS)) {\n            const address = await arConnect.getActiveAddress();\n            dispatch(actionsCreator.setArAddress(address));\n            window.addEventListener(\"walletSwitch\", walletSwitchListener);\n          }\n\n          // Event cleaner\n          return () =>\n            window.removeEventListener(\"walletSwitch\", walletSwitchListener);\n        } catch {\n          console.log(\"Couldn't get the wallet address\");\n        }\n      })();\n    }\n  }, [arConnect, dispatch, walletSwitchListener]);\n\n  const connect = useCallback(async (callback?: () => void) => {\n    try {\n      await arConnect.connect(PERMISSIONS);\n      const address = await arConnect.getActiveAddress();\n\n      dispatch(actionsCreator.setArAddress(address));\n      window.addEventListener(\"walletSwitch\", walletSwitchListener);\n      callback?.();\n    } catch {\n      // @TODO: Improve this, perhaps a modal for letting the user know you weren't able to connect.\n      console.warn(\"Couldn't connect\");\n    }\n  }, [arConnect, dispatch, walletSwitchListener]);\n\n  const disconnect = useCallback(async (callback?: () => void) => {\n    try {\n      await arConnect.disconnect();\n\n      dispatch(actionsCreator.clearArAddress());\n      window.removeEventListener(\"walletSwitch\", walletSwitchListener);\n      callback?.();\n    } catch {\n      // @TODO: Improve this, perhaps a modal or a toast for letting the user know you weren't able to disconnect.\n      console.warn(\"Couldn't disconnect\");\n    }\n  }, [arConnect, dispatch, walletSwitchListener]);\n\n  return {\n    connect,\n    disconnect,\n    isAuthenticated: !!address,\n    isArConnectInstalled: !!arConnect,\n  };\n}\n\nexport default useAuthentication;\n","import React from \"react\";\n\nimport styles from \"./styles.module.scss\";\n\nimport useAuthentication from \"../../hooks/useAuthentication\";\n\nfunction ArConnect() {\n  const { connect, disconnect, isAuthenticated, isArConnectInstalled } =\n    useAuthentication();\n\n  const handleConnect = () => {\n    // @TODO: Modify this to trigger modal\n    if (isArConnectInstalled)\n      connect(() => {\n        // @TODO: Dispatch modal for letting the user know they successfully connected\n      });\n    else console.log(\"Dispatch modal with warning\");\n  };\n\n  const handleDisconnect = () =>\n    disconnect(() => {\n      // @TODO: Dispatch modal for letting the user know they successfully disconnected\n    });\n\n  return (\n    <button\n      type=\"button\"\n      className={styles.button}\n      onClick={isAuthenticated ? handleConnect : handleDisconnect}\n    >\n      {isAuthenticated ? \"Disconnect\" : \"Connect\"}\n    </button>\n  );\n}\n\nexport default ArConnect;\n","import React from \"react\";\n\nimport { useSelector } from '../../context';\nimport arweave from '../../config/arweave';\nimport { Settings, Profile, CreateAccount, KeyFile } from \"../index\";\nimport ArConnect from \"../ArConnect\";\n\nexport interface IConnectWallet {\n  taken: any;\n  username: string;\n  domain: string;\n}\n\nfunction ConnectWallet({\n  taken,\n  username,\n  domain\n}: IConnectWallet) {\n  const { address } = useSelector(state => state.user)\n\n  return (\n    <div id=\"main\" style={{ marginTop: \"4%\" }}>\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }} className=\"major\">\n        Sign in\n      </h2>\n      <section style={{ width: \"100%\" }}>\n        <p>\n          Connect your SSI Permaweb Key to access your settings or to register a\n          new account:\n        </p>\n        <ArConnect />\n        <KeyFile />\n      </section>\n      {/* <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n        {address && account.ssi === address && (\n          <Settings\n            username={username}\n            domain={domain}\n            account={account}\n            pscMember={pscMember}\n            arweave={arweave}\n            arconnect={arconnect}\n            keyfile={keyfile}\n          />\n        )}\n        {taken === \"yes\" && account.ssi !== address && (\n          <Profile\n            username={username}\n            domain={domain}\n            account={account}\n            arweave={arweave}\n            arconnect={arconnect}\n            keyfile={keyfile}\n          />\n        )}\n        {taken === \"no\" && (\n          <CreateAccount\n            username={username}\n            domain={domain}\n            address={addr}\n            pscMember={pscMember}\n            arweave={arweave}\n            arconnect={arconnect}\n            keyfile={keyfile}\n          />\n        )}\n      </section> */}\n    </div>\n  );\n}\n\nexport default ConnectWallet;\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID, permawalletTemplateID, permawalletSourceID } from \".\";\nimport * as DKMS from \"../lib/dkms\";\nimport * as SmartWeave from \"smartweave\";\n\nfunction CreateAccount({\n  username,\n  domain,\n  address,\n  pscMember,\n  arweave,\n  arconnect,\n  keyfile,\n}) {\n  const emptyMessage = {\n    firstName: \"\",\n    lastName: \"\",\n    streetName: \"\",\n    buildingNumber: \"\",\n    country: \"\",\n  };\n  const [ivms101, setIvms101] = useState(emptyMessage);\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [streetName, setStreetName] = useState(\"\");\n  const [buildingNumber, setBuildingNumber] = useState(\"\");\n  const [country, setCountry] = useState(\"\");\n  const handleFirstName = (event) => {\n    setFirstName(event.target.value);\n  };\n  const handleLastName = (event) => {\n    setLastName(event.target.value);\n  };\n  const handleStreetName = (event) => {\n    setStreetName(event.target.value);\n  };\n  const handleBuildingNumber = (event) => {\n    setBuildingNumber(event.target.value);\n  };\n  const handleCountry = (event) => {\n    setCountry(event.target.value);\n  };\n\n  const [passportButton, setPassportButton] = useState(\"button primary\");\n  const [savePassport, setSavePassport] = useState(\n    \"Save SSI Travel Rule Passport\"\n  );\n  const [registerButton, setRegisterButton] = useState(\"button primary\");\n  const [register, setRegister] = useState(\n    \"Register Self-Sovereign Identity Permawallet\"\n  );\n\n  return (\n    <div id=\"main\">\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }} class=\"major\">\n        {\" \"}\n        Register {username}.{domain}{\" \"}\n      </h2>\n      <p style={{ width: \"100%\" }}>\n        {\" \"}\n        {username}.{domain} is available for you to register!{\" \"}\n      </p>\n      <section style={{ width: \"100%\" }}>\n        <ol>\n          <li style={{ marginTop: \"4%\" }}>\n            <h4 class=\"major\">Generate your SSI Travel Rule Passport</h4>\n            <p>\n              Create an{\" \"}\n              <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">\n                IVMS101 message\n              </a>{\" \"}\n              for KYC to make your self-hosted wallet compliant with the FATF\n              Travel Rule to counteract money laundering and terrorism\n              financing, and thus building a web of trust. This personal\n              information will get encrypted by an SSI Travel Rule Key generated\n              by your SSI Permawallet - only you decide who can read this\n              message. You won't need to give this information anymore to third\n              parties, over and over again. Your SSI Travel Rule - private - Key\n              will get encrypted by your SSI Permaweb Key and saved into your\n              wallet, so only you can access it. When making a transfer, you\n              will have the option to attach this secret encrypted by the\n              beneficiary's SSI Communication Key so they can read your Travel\n              Rule Passport.\n            </p>\n            <form>\n              <div class=\"fields\">\n                <div class=\"field half\">\n                  <label>First name</label>\n                  <input type=\"text\" onChange={handleFirstName} />\n                </div>\n                <div class=\"field half\">\n                  <label>Last name</label>\n                  <input type=\"text\" onChange={handleLastName} />\n                </div>\n              </div>\n              <section style={{ width: \"100%\", marginBottom: \"3%\" }}>\n                <h4>Residential address</h4>\n                <div class=\"fields\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Street name\"\n                    onChange={handleStreetName}\n                  />\n                </div>\n              </section>\n              <div class=\"fields\">\n                <div class=\"field half\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"Building number\"\n                    onChange={handleBuildingNumber}\n                  />\n                </div>\n                <div class=\"field half\">\n                  <select onChange={handleCountry}>\n                    <option value=\"\">Select country of residence</option>\n                    <option value=\"Argentina\">Argentina</option>\n                    <option value=\"Denmark\">Denmark</option>\n                    <option value=\"Singapore\">Singapore</option>\n                    <option value=\"United Kingdom\">United Kingdom</option>\n                  </select>\n                </div>\n              </div>\n              <ul class=\"actions\">\n                <li>\n                  <input\n                    type=\"button\"\n                    class={passportButton}\n                    value={savePassport}\n                    onClick={() => {\n                      setIvms101({\n                        firstName: firstName,\n                        lastName: lastName,\n                        streetName: streetName,\n                        buildingNumber: buildingNumber,\n                        country: country,\n                      });\n                      setSavePassport(\"Saved\");\n                      setPassportButton(\"button\");\n                    }}\n                  />\n                </li>\n                <li>\n                  <input\n                    type=\"reset\"\n                    value=\"Reset\"\n                    onClick={(_event) => {\n                      setIvms101(emptyMessage);\n                      setSavePassport(\"Save SSI Travel Rule Passport\");\n                      setPassportButton(\"button primary\");\n                    }}\n                  />\n                </li>\n              </ul>\n            </form>\n          </li>\n          <li style={{ marginTop: \"6%\" }}>\n            <h4 class=\"major\">\n              Create your SSI Permawallet for {username}.{domain}\n            </h4>\n            <input\n              type=\"button\"\n              class={registerButton}\n              value={register}\n              onClick={async () => {\n                try {\n                  if (keyfile === \"\" && arconnect === \"\") {\n                    throw new Error(\n                      `You have to connect with ArConnect or your keyfile.`\n                    );\n                  }\n                  if (savePassport === \"Save SSI Travel Rule Passport\") {\n                    throw new Error(\n                      \"You have to fill up and save the SSI Travel Rule Passport information first.\"\n                    );\n                  }\n                  // SSI Communication Keys\n                  const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n\n                  // Travel Rule Passport\n                  const trSsiKeys = await DKMS.generateSsiKeys(arweave);\n                  const encryptedTrPassport = await DKMS.encryptData(\n                    ivms101,\n                    trSsiKeys.publicEncryption\n                  );\n                  alert(\n                    `This is your encrypted SSI Travel Rule Passport: ${encryptedTrPassport}`\n                  );\n\n                  // Encrypt private keys\n                  let ssiCommPrivate;\n                  let ssiTravelRulePrivate;\n                  if (arconnect !== \"\") {\n                    ssiCommPrivate = await DKMS.encryptKey(\n                      arconnect,\n                      ssiCommKeys.privateKey\n                    );\n                    ssiTravelRulePrivate = await DKMS.encryptKey(\n                      arconnect,\n                      trSsiKeys.privateKey\n                    );\n                  } else {\n                    const publicEncryption =\n                      await DKMS.generatePublicEncryption(keyfile);\n                    ssiCommPrivate = await DKMS.encryptData(\n                      ssiCommKeys.privateKey,\n                      publicEncryption\n                    );\n                    ssiTravelRulePrivate = await DKMS.encryptData(\n                      trSsiKeys.privateKey,\n                      publicEncryption\n                    );\n                  }\n\n                  /*For testing\n                                        const decryptedTrSsiKey = await DKMS.decryptData(ssiTravelRulePrivate, keyfile);\n                                        alert(`SSI TR decrypted key: ${decryptedTrSsiKey}`);\n                                        const decryptedTrPassport = await DKMS.decryptData(encryptedTrPassport, JSON.parse(decryptedTrSsiKey));\n                                        alert(decryptedTrPassport);\n                                        */\n\n                  // Permawallet initial state\n\n                  let permawalletInitState = await SmartWeave.readContract(\n                    arweave,\n                    permawalletTemplateID.toString()\n                  );\n                  permawalletInitState.ssi = address;\n                  permawalletInitState.ssiComm = ssiCommKeys.publicEncryption;\n                  permawalletInitState.trp.message = encryptedTrPassport;\n                  permawalletInitState.trp.key = ssiTravelRulePrivate;\n                  permawalletInitState.keys.ssiComm = ssiCommPrivate;\n\n                  // Fee paid to the PSC\n\n                  const fee = arweave.ar.arToWinston(\"0.1\");\n                  let tx;\n\n                  if (arconnect !== \"\") {\n                    if (\n                      window.confirm(\n                        \"The fee to create your SSI Permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\"\n                      )\n                    ) {\n                      if (pscMember === address) {\n                        alert(\n                          `You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`\n                        );\n                        tx = await arweave\n                          .createTransaction({\n                            data: JSON.stringify(permawalletInitState),\n                          })\n                          .catch((err) => {\n                            throw err;\n                          });\n                      } else {\n                        tx = await arweave.createTransaction({\n                          data: JSON.stringify(permawalletInitState),\n                          target: pscMember.toString(),\n                          quantity: fee.toString(),\n                        });\n                      }\n                      tx.addTag(\"Dapp\", \"tyron\");\n                      tx.addTag(\"App-Name\", \"SmartWeaveContract\");\n                      tx.addTag(\"App-Version\", \"0.3.0\");\n                      tx.addTag(\"Contract-Src\", permawalletSourceID.toString());\n                      tx.addTag(\"Content-Type\", \"application/json\");\n\n                      await arweave.transactions.sign(tx).catch((err) => {\n                        throw err;\n                      });\n                      await arweave.transactions.post(tx).catch((err) => {\n                        throw err;\n                      });\n                      tx = tx.id;\n                    }\n                  } else {\n                    if (\n                      window.confirm(\n                        \"The fee to create your SSI Permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\"\n                      )\n                    ) {\n                      if (pscMember === address) {\n                        alert(\n                          `You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`\n                        );\n                        tx = await SmartWeave.createContractFromTx(\n                          arweave,\n                          keyfile,\n                          permawalletSourceID.toString(),\n                          JSON.stringify(permawalletInitState)\n                        ).catch((err) => {\n                          throw err;\n                        });\n                      } else {\n                        tx = await SmartWeave.createContractFromTx(\n                          arweave,\n                          keyfile,\n                          permawalletSourceID.toString(),\n                          JSON.stringify(permawalletInitState),\n                          [],\n                          pscMember,\n                          fee\n                        ).catch((err) => {\n                          throw err;\n                        });\n                      }\n                    }\n                  }\n                  if (tx === undefined) {\n                    alert(`Transaction rejected.`);\n                  } else {\n                    alert(`Your permawallet ID is: ${tx}`);\n\n                    const dnsInput = {\n                      function: \"dns\",\n                      username: username,\n                      dnsssi: address,\n                      dnswallet: tx,\n                    };\n\n                    let dnsTx;\n                    if (arconnect !== \"\") {\n                      if (\n                        window.confirm(\n                          `The fee to get ${username}.${domain} is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.`\n                        )\n                      ) {\n                        if (pscMember === address) {\n                          alert(\n                            `You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`\n                          );\n                          dnsTx = await arweave\n                            .createTransaction({\n                              data: Math.random().toString().slice(-4),\n                            })\n                            .catch((err) => {\n                              throw err;\n                            });\n                        } else {\n                          dnsTx = await arweave\n                            .createTransaction({\n                              data: Math.random().toString().slice(-4),\n                              target: pscMember.toString(),\n                              quantity: fee.toString(),\n                            })\n                            .catch((err) => {\n                              throw err;\n                            });\n                        }\n                        dnsTx.addTag(\"Dapp\", \"tyron\");\n                        dnsTx.addTag(\"App-Name\", \"SmartWeaveAction\");\n                        dnsTx.addTag(\"App-Version\", \"0.3.0\");\n                        dnsTx.addTag(\"Contract\", ayjaPstStateID.toString());\n                        dnsTx.addTag(\"Input\", JSON.stringify(dnsInput));\n\n                        await arweave.transactions.sign(dnsTx).catch((err) => {\n                          throw err;\n                        });\n                        await arweave.transactions.post(dnsTx).catch((err) => {\n                          throw err;\n                        });\n                        dnsTx = dnsTx.id;\n                      }\n                    } else {\n                      if (\n                        window.confirm(\n                          `The fee to get ${username}.${domain} is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.`\n                        )\n                      ) {\n                        if (pscMember === address) {\n                          alert(\n                            `You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`\n                          );\n                          dnsTx = await SmartWeave.interactWrite(\n                            arweave,\n                            keyfile,\n                            ayjaPstStateID.toString(),\n                            dnsInput\n                          ).catch((err) => {\n                            throw err;\n                          });\n                        } else {\n                          dnsTx = await SmartWeave.interactWrite(\n                            arweave,\n                            keyfile,\n                            ayjaPstStateID.toString(),\n                            dnsInput,\n                            [],\n                            pscMember.toString(),\n                            fee.toString()\n                          ).catch((err) => {\n                            throw err;\n                          });\n                        }\n                      }\n                    }\n                    if (dnsTx === undefined) {\n                      alert(`Transaction rejected.`);\n                    } else {\n                      alert(\n                        `Your DNS transaction was successful! Its ID is: ${dnsTx}`\n                      );\n                      setRegister(\"registered\");\n                      setRegisterButton(\"button\");\n                    }\n                  }\n                } catch (error) {\n                  alert(error);\n                }\n              }}\n            />\n            {register === \"registered\" && (\n              <p style={{ marginTop: \"4%\" }}>\n                To access {username}.{domain}'s settings, go back to the\n                browser, search and make sure your SSI Permaweb Key is\n                connected. Please wait a few minutes until your Register\n                transaction reaches finality on the Arweave network.\n              </p>\n            )}\n          </li>\n        </ol>\n      </section>\n    </div>\n  );\n}\n\nexport default CreateAccount;\n","import Arweave from \"arweave\";\n\nconst arweave = Arweave.init({\n  host: \"arweave.net\",\n  port: 443,\n  protocol: \"https\",\n});\n\nexport default arweave;\n","import { JWKInterface } from \"arweave/node/lib/wallet\";\nimport React, { useState } from \"react\";\n\nimport arweave from \"../../config/arweave\";\nimport { useDispatch } from \"../../context\";\nimport { actionsCreator } from \"../../context/user/actions\";\n\nexport interface IKeyFile {\n  className?: string;\n}\n\nfunction KeyFile({ className }: IKeyFile) {\n  const [keyFile, setKeyFile] = useState<JWKInterface>();\n  const dispatch = useDispatch();\n\n  const handleOnChange = ({\n    currentTarget: { files },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    const file = files?.[0];\n    if (file) {\n      const fileReader = new FileReader();\n      fileReader.onload = ({ target }) => {\n        const result = target?.result as string;\n        if (result) setKeyFile(JSON.parse(result));\n      };\n      fileReader.readAsText(file);\n    }\n  };\n\n  const handleSaveFile = async () => {\n    try {\n      const address = await arweave.wallets.jwkToAddress(keyFile);\n      dispatch(actionsCreator.setArAddress(address));\n    } catch (e) {\n      // @TODO: dispatch modal or toast with error\n    }\n  };\n\n  return (\n    <div className={className}>\n      <input type=\"file\" onChange={handleOnChange} />\n      <button\n        type=\"button\"\n        onClick={handleSaveFile}\n      >\n        Save\n      </button>\n    </div>\n  );\n}\n\nexport default KeyFile;\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID } from \".\";\nimport * as DKMS from '../lib/dkms';\nimport * as SmartWeave from \"smartweave\";\n\nfunction Settings({ username, domain, account, pscMember, arweave, arconnect, keyfile }) {\n    const[update, setUpdate] = useState('');\n    const handleUpdate = event => {\n        setUpdate(event.target.value);\n    };\n\n    const[newAddress, setNewAddress] = useState('');\n    const handleNewAddress = event => {\n        setNewAddress(event.target.value);\n    };\n\n    const[keyId, setKeyId] = useState('');\n    const handleKeyId = event => {\n        setKeyId(event.target.value);\n    };\n\n    const[specificId, setSpecificId] = useState('');\n    const handleSpecificId = event => {\n        setSpecificId(event.target.value);\n    };\n\n    const emptyMessage = {\n        firstName: \"\",\n        lastName: \"\",\n        streetName: \"\",\n        buildingNumber: \"\",\n        country: \"\"\n    };\n    const[ivms101, setIvms101] = useState(emptyMessage);\n    const[firstName, setFirstName] = useState('');\n    const[lastName, setLastName] = useState('');\n    const[streetName, setStreetName] = useState('');\n    const[buildingNumber, setBuildingNumber] = useState('');\n    const[country, setCountry] = useState('');\n    const handleFirstName = event => {\n        setFirstName(event.target.value);\n    };\n    const handleLastName = event => {\n        setLastName(event.target.value);\n    };\n    const handleStreetName = event => {\n        setStreetName(event.target.value);\n    };\n    const handleBuildingNumber = event => {\n        setBuildingNumber(event.target.value);\n    };\n    const handleCountry = event => {\n        setCountry(event.target.value);\n    };\n\n    const[updateAddressLegend, setUpdateAddressLegend] = useState('update');\n    const[updateAddressButton, setUpdateAddressButton] = useState('button primary');\n    const[sendKey, setSendKey] = useState('encrypt & send to permawallet');\n    const[newKeyButton, setNewKeyButton] = useState('button primary');\n    const[savePassportLegend, setSavePassportLegend] = useState('save');\n    const[savePassportButton, setSavePassportButton] = useState('button primary');\n    const[updatePassportLegend, setUpdatePassportLegend] = useState('update');\n    const[updatePassportButton, setUpdatePassportButton] = useState('button primary');\n    \n    return(\n\t\t<div id=\"main\">\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">{ username }.{ domain } settings</h2>\n            <p style={{ width: \"100%\" }}>Hi { username }.{ domain }, welcome back!</p>\n            <section style={{ width: \"100%\", marginTop:\"4%\" }}>\n                <h4 class=\"major\">Update an address</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleUpdate }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiAyja\">SSI address in AYJA</option>\n                                <option value=\"permawallet\">Permawallet address</option>\n                                <option value=\"ssiPermawallet\">SSI address in permawallet</option>\n                            </select>\n                        </div>\n                        \n                        { update !== \"\" && <div class=\"field half\"><input type=\"text\" placeholder=\"New address\" onChange={ handleNewAddress } /></div> }\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ updateAddressButton } value={ updateAddressLegend }\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    let input;\n                                    let contractId;\n                                    switch (update) {\n                                        case 'ssiAyja':\n                                            input = {\n                                                function: 'updateSsi',\n                                                username: username,\n                                                ssi: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;\n                                            break;\n                                        case 'permawallet':\n                                            input = {\n                                                function: 'updateWallet',\n                                                username: username,\n                                                owallet: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;  \n                                            break;\n                                        case 'ssiPermawallet':\n                                            input = {\n                                                function: 'ssi',\n                                                ssi: newAddress\n                                            };\n                                            contractId = account.wallet;\n                                            break;                                        \n                                        default:\n                                            throw new Error('Wrong selection.');\n                                    }\n                                    \n                                    const fee = arweave.ar.arToWinston('0.1');\n                                    \n                                    let tx;\n                                    if( arconnect !== '' ){\n                                        if( window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', contractId.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n    \n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });\n                                            tx = tx.id;                                  \n                                        }\n                                    } else{\n                                        if(window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input).catch( err => { throw err });\n                                            } else{\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input, [], pscMember, fee).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    if( tx === undefined ){\n                                        alert(`Transaction rejected.`)\n                                    } else{\n                                        alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                        setUpdateAddressLegend('updated');\n                                        setUpdateAddressButton('button');\n                                    }                             \n                                } catch (error) {\n                                    alert(error)\n                                }\n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setUpdate(\"\"); setUpdateAddressLegend('update'); setUpdateAddressButton('button primary') }} /></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n                <h4 class=\"major\">Generate a new key</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleKeyId }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiComm\">SSI Communication Key</option>\n                                <option value=\"byId\">Key by ID</option>\n                            </select>\n                        </div>\n                        \n                        { keyId === \"byId\" && <div class=\"field half\"><input type=\"text\" placeholder=\"Key ID\" onChange={ handleSpecificId } /></div> }\n                    </div>    \n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ newKeyButton } value={ sendKey }\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    if( !account.wallet || account.wallet === \"\") {\n                                        throw new Error(`It seems like you don't have any SSI Permawallet registered.`);\n                                    }\n\n                                    let tx;\n                                    if( arconnect !== '' ){ \n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptKey(arconnect, ssiCommKeys.privateKey);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssicomm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptKey(arconnect, keys.privateKey);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if(window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', ayjaPstStateID.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n\n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });\n                                            tx = tx.id;                                   \n                                        }\n                                    } else{\n                                        const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptData(ssiCommKeys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssicomm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptData(keys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if( window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                tx = await SmartWeave.interactWrite(\n                                                    arweave,\n                                                    keyfile,\n                                                    account.wallet.toString(),\n                                                    input        \n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await SmartWeave.interactWrite(\n                                                    arweave,\n                                                    keyfile,\n                                                    account.wallet.toString(),\n                                                    input,\n                                                    [],\n                                                    pscMember.toString(),\n                                                    fee.toString()\n                                                ).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    if( tx === undefined ){\n                                        alert(`Transaction still processing.`)\n                                    } else{\n                                        alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                        setSendKey('sent');\n                                        setNewKeyButton('button');\n                                    }\n                                } catch (error) {\n                                    alert(error)\n                                }                            \n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setKeyId(\"\"); setSendKey('send'); setNewKeyButton('button primary') }}/></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n                <h4 class=\"major\">Update your SSI Travel Rule Passport</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <label>First name</label>\n                            <input type=\"text\" onChange={ handleFirstName } />\n                        </div>\n                        <div class=\"field half\">\n                            <label>Last name</label>\n                            <input type=\"text\" onChange={ handleLastName } />\n                        </div>\n                    </div>\n                    <section style={{width:'100%', marginBottom:\"3%\"}}>\n                        <h4>Residential address</h4>\n                        <div class=\"fields\">\n                            <input type=\"text\" placeholder=\"Street name\" onChange={ handleStreetName } />\n                        </div>\n                    </section>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <input type=\"text\" placeholder=\"Building number\" onChange={ handleBuildingNumber } />\n                        </div>\n                        <div class=\"field half\">\n                            <select onChange={ handleCountry }>\n                                <option value=\"\">Select country of residence</option>\n                                <option value=\"Argentina\">Argentina</option>\n                                <option value=\"Denmark\">Denmark</option>\n                                <option value=\"Singapore\">Singapore</option>\n                                <option value=\"United Kingdom\">United Kingdom</option>\n                            </select>\n                        </div>\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ savePassportButton } value={ savePassportLegend }\n                                onClick={ () => {\n                                    setIvms101({\n                                        firstName: firstName,\n                                        lastName: lastName,\n                                        streetName: streetName,\n                                        buildingNumber: buildingNumber,\n                                        country: country\n                                    });\n                                    setSavePassportLegend('Saved');\n                                    setSavePassportButton('button');\n                                }}\n                                />\n                        </li>\n                        <li><input type=\"button\" class={ updatePassportButton } value={ updatePassportLegend }\n                                onClick={ async() => {\n                                    try {\n                                        if( keyfile === '' &&  arconnect === '' ){\n                                            throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                        }\n                                        if( savePassportLegend === 'save' ){\n                                            throw new Error('You have to fill up and save the SSI Travel Rule Passport information first.')\n                                        }\n\n                                        // Travel Rule Passport\n                                        const trSsiKeys = await DKMS.generateSsiKeys(arweave);\n                                        const encryptedTrPassport = await DKMS.encryptData(ivms101, trSsiKeys.publicEncryption);\n                                        alert(`This is your encrypted SSI Travel Rule Passport: ${ encryptedTrPassport }`);\n\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        let ssiTravelRulePrivate;\n                                        let input;\n                                        let tx;\n                                        if( arconnect !== '' ){\n                                            if( window.confirm(\"The fee to update your SSI Travel Rule Passport is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                ssiTravelRulePrivate = await DKMS.encryptKey(arconnect, trSsiKeys.privateKey);\n                                                input = {\n                                                    function: 'trp',\n                                                    trmessage: encryptedTrPassport,\n                                                    trkey: ssiTravelRulePrivate\n                                                };\n                                                \n                                                if( pscMember === account.ssi ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                    tx = await arweave.createTransaction(\n                                                        { \n                                                            data: Math.random().toString().slice(-4) \n                                                        }\n                                                    ).catch( err => { throw err });\n                                                } else{\n                                                    tx = await arweave.createTransaction(\n                                                        {\n                                                            data: Math.random().toString().slice(-4),\n                                                            target: pscMember.toString(),\n                                                            quantity: fee.toString(),\n                                                        }\n                                                    ).catch( err => { throw err });\n                                                }\n                                                tx.addTag('Dapp', 'tyron');\n                                                tx.addTag('App-Name', 'SmartWeaveAction');\n                                                tx.addTag('App-Version', '0.3.0');\n                                                tx.addTag('Contract', account.wallet.toString());\n                                                tx.addTag('Input', JSON.stringify(input));\n        \n                                                await arweave.transactions.sign(tx).catch( err => { throw err });\n                                                await arweave.transactions.post(tx).catch( err => { throw err });\n                                                tx = tx.id;                                  \n                                            }\n                                        } else{\n                                            if(window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                                ssiTravelRulePrivate = await DKMS.encryptData(trSsiKeys.privateKey, publicEncryption);\n                                                input = {\n                                                    function: 'trp',\n                                                    trmessage: encryptedTrPassport,\n                                                    trkey: ssiTravelRulePrivate\n                                                };\n\n                                                if( pscMember === account.ssi ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                    tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet.toString(), input).catch( err => { throw err });\n                                                } else{\n                                                    tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet.toString(), input, [], pscMember, fee).catch( err => { throw err });\n                                                }                                       \n                                            }\n                                        }\n                                        if( tx === undefined ){\n                                            alert(`Transaction rejected.`)\n                                        } else{\n                                            alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                            setUpdatePassportLegend('updated');\n                                            setUpdatePassportButton('button');\n                                        }                            \n                                    } catch (error) {\n                                        alert(error)\n                                    }\n                                }}\n                            /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setIvms101(emptyMessage); setSavePassportLegend('save'); setSavePassportButton('button primary'); setUpdatePassportLegend('update'); setUpdatePassportButton('button primary') }}/></li>  \n                    </ul>\n                </form>\n            </section>\n        </div>\n\t);\n}\n\nexport default Settings;\n","const BASE_URL = \"https://github.com/pungtas/smart-contracts.tyron/blob/main\";\n\nexport enum SMART_CONTRACTS {\n  INIT = \"init\",\n  DID = \"did\",\n  xWALLET = \"xwallet\",\n  SSI = \"ssi\",\n  PST = \"pst\",\n  PSTi = \"psti\",\n  xPSTi = \"xpsti\",\n  pWALLET = \"pwallet\",\n}\n\nexport const VALID_SMART_CONTRACTS: string[] = [\n  SMART_CONTRACTS.INIT,\n  SMART_CONTRACTS.DID,\n  SMART_CONTRACTS.xWALLET,\n  SMART_CONTRACTS.SSI,\n  SMART_CONTRACTS.PST,\n  SMART_CONTRACTS.PSTi,\n  SMART_CONTRACTS.xPSTi,\n  SMART_CONTRACTS.pWALLET\n];\n\n// @TODO: Add missing urls from this list.\nexport const SMART_CONTRACTS_URLS: { [key in SMART_CONTRACTS]: string } = {\n  [SMART_CONTRACTS.DID]: `${BASE_URL}/DID/did.tyron.scilla`,\n  [SMART_CONTRACTS.xWALLET]: `${BASE_URL}/DID/DIDdapps/DIDxWallet.tyron.scilla`,\n  [SMART_CONTRACTS.INIT]: `${BASE_URL}/INIT/init.tyron.scilla`,\n  [SMART_CONTRACTS.PST]: `${BASE_URL}/PST/pst.tyron.scilla`,\n  [SMART_CONTRACTS.PSTi]: `${BASE_URL}/PST/new-token/PSTi.tyron.scilla`,\n  [SMART_CONTRACTS.xPSTi]: `${BASE_URL}/PST/wrapped-token/xPSTi.tyron.scilla`,\n  [SMART_CONTRACTS.pWALLET]: `${BASE_URL}/PERMAWALLET/pWallet.tyron.js`,\n  [SMART_CONTRACTS.SSI]: `${BASE_URL}/SSI/ssi.tyron.scilla`\n};\n","export enum DOMAINS {\n  TYRON = 'tyron',\n  SSI = 'ssi',\n  DID = 'did',\n  MAPU = 'mapu',\n  COOP = 'coop'\n}\n","import React, { useState } from \"react\";\n\nimport {\n  SMART_CONTRACTS_URLS,\n  VALID_SMART_CONTRACTS,\n} from \"../../constants/tyron\";\nimport { DOMAINS } from \"../../constants/domains\";\n\nimport styles from \"./styles.module.scss\";\n\nfunction SearchBar() {\n  const [value, setValue] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [domain, setDomain] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleOnKeyPress = ({ key }: React.KeyboardEvent<HTMLInputElement>) => {\n    if (key === \"Enter\") {\n      // @TODO: Handle other domains\n      switch (domain) {\n        case DOMAINS.TYRON:\n          if (VALID_SMART_CONTRACTS.includes(name))\n            window.open(\n              SMART_CONTRACTS_URLS[\n                name as unknown as keyof typeof SMART_CONTRACTS_URLS\n              ]\n            );\n          else setError(\"Invalid smart contract\");\n          break;\n        case DOMAINS.SSI:\n          console.log(\"\");\n          break;\n        default:\n          setError(\"Domain not valid\");\n      }\n    }\n  };\n\n  const handleSearchBar = ({\n    currentTarget: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(value);\n    if (value) {\n      const [name = \"\", domain = \"\"] = value.split(\".\");\n      setName(name);\n      setDomain(domain);\n    } else {\n      setError(\"\");\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <input\n        type=\"text\"\n        className={styles.searchBar}\n        onKeyPress={handleOnKeyPress}\n        onChange={handleSearchBar}\n        value={value}\n      />\n      <p className={styles.errorMsg}>{error}</p>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import { useReducer } from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport {\n  stateContext as StateContext,\n  dispatchContext as DispatchContext,\n  globalReducer,\n  globalState,\n} from \"./context/index\";\nimport Routes from \"./constants/routes\";\nimport { Header, Footer, Home, Domains, Contact } from \"./components\";\nimport \"./styles/css/main.css\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(globalReducer, globalState);\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <div id=\"wrapper\">\n          <Router>\n            <Header />\n            <Switch>\n              <Route exact path={Routes.Home} component={Home} />\n              <Route exact path={Routes.Domains} component={Domains} />\n              <Route exact path={Routes.Contact} component={Contact} />\n              <Redirect to={Routes.Home} />\n            </Switch>\n            <Footer />\n          </Router>\n        </div>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/main.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"styles_searchBar__2_OfB\",\"errorMsg\":\"styles_errorMsg__1Woia\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3NFhU\",\"nav\":\"styles_nav__BMrUO\"};"],"sourceRoot":""}