{"version":3,"sources":["images/tyron_logo.png","components/header.js","components/footer.js","components/home.js","images/steffen.JPEG","components/about.js","components/did.js","images/incendios_chubut.jpg","components/mapu.js","components/token.js","components/defi.js","components/permawallet.js","lib/select-weighted-ayja-holder.js","components/browser.js","components/contact.js","lib/crypto-util.js","lib/dkms.js","components/profile.js","components/connectWallet.js","components/createAccount.js","components/settings.js","components/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","src","logo","width","alt","class","Footer","href","withRouter","to","role","aria-label","style","marginBottom","steffen","incendios_chubut","chartType","loader","data","options","is3D","backgroundColor","chartArea","height","left","right","fontName","colors","legend","position","textStyle","color","fontSize","bold","tooltip","text","rootProps","selectWeightedAyjaHolder","accounts","a","totalTokens","Object","keys","username","balance","weighted","addr","ssi","sum","r","Math","random","address","Error","useState","setUsername","domain","setDomain","account","setAccount","pscMember","setPscMember","taken","setTaken","handleReset","onChange","onSubmit","e","preventDefault","type","event","target","value","for","onClick","arweave","Arweave","init","host","port","protocol","SmartWeave","ayjaPstStateID","ayjaState","undefined","generateRandomBytes","length","array","Uint8Array","window","crypto","getRandomValues","generatePublicEncryption","privKey","privateKey","create","algo","name","hash","keyData","kty","n","alg","ext","subtle","importKey","publicKey","keyBuf","encrypt","encryptedPublicKey","publicEncryption","utils","concatBuffers","bufferTob64Url","generateSsiKeys","wallets","generate","encryptKey","arConnect","key","JSON","stringify","algorithm","encryptedKey","encryptData","publicEnc","b64UrlToBuffer","encKey","slice","contentBuf","TextEncoder","encode","encryptedContent","encryptedData","Profile","arconnect","keyfile","donationAmount","setDonationAmount","message","setMessage","marginTop","placeholder","confirm","createTransaction","ttarget","quantity","ar","arToWinston","tx","transactions","sign","post","result","alert","status","wallet","method","action","rows","userPermawallet","userSsiComm","ssiComm","DKMS","encryptedMessage","setValue","setAddr","setArconnect","setKeyfile","useArConnect","useEffect","getPermissions","includes","getActiveAddress","addEventListener","detail","fileInput","React","createRef","disconnect","permissions","open","connect","ref","current","files","fr","FileReader","onload","file","parse","readAsText","jwkToAddress","CreateAccount","firstName","lastName","streetName","buildingNumber","country","ivms101","setIvms101","setFirstName","setLastName","setStreetName","setBuildingNumber","setCountry","disabled","selected","ssiCommKeys","trSsiKeys","encryptedTrPassport","ssiCommPrivate","ssiTravelRulePrivate","permawalletTemplateID","toString","permawalletInitState","trp","fee","catch","err","addTag","permawalletSourceID","dnsInput","dnsSsi","dnsWallet","dnsTx","Settings","update","setUpdate","newAddress","setNewAddress","keyId","setKeyId","specificId","setSpecificId","input","function","contractId","oWallet","_event","App","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.94529643.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tyron_logo.aa90c4ca.png\";","import React from \"react\";\nimport logo from '../images/tyron_logo.png';\n\nfunction Header() {\n    return(\n        <div id=\"header\">\n            <img src={logo} width=\"20%\" alt=\"tyron_logo\"/>\n            <div class=\"content\">\n                <div class=\"inner\">\n                    <h1>tyron self-sovereign identity protocol</h1>\n                    <p>own your data, empower your world</p>\n                </div>\n            </div>\n            <nav/>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n    return(\n        <footer id=\"footer\">\n            <p class=\"copyright\">&copy; <a href=\"https://github.com/pungtas\">Tyron Pungtas</a>. Design: <a href=\"https://html5up.net\">HTML5 UP</a>.</p>\n\t\t</footer>\n    );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div id=\"header\">\n            <nav>\n                <ul>\n                    <li><Link to=\"/about\">About</Link></li>\n                    <li><Link to=\"/did\">DID</Link></li>\n                    <li><Link to=\"/mapu\">.Mapu</Link></li>\n                    <li><Link to=\"/token\">Token</Link></li>\n                    <li><Link to=\"/defi\">DeFi</Link></li>\n                    <li><Link to=\"/permawallet\">Wallet</Link></li>\n                    <li><Link to=\"/browser\">Browser</Link></li>\n                    <li><Link to=\"/contact\">Contact</Link></li>\n                </ul>\n            </nav>\n        </div>\n    );\n}\n\nexport default withRouter(Home);\n","export default __webpack_public_path__ + \"static/media/steffen.81563399.JPEG\";","import React from \"react\";\nimport steffen from '../images/steffen.JPEG';\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction About() {\n\treturn(\n\t\t<div id=\"main\">\n\t\t\t<span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n\t\t\t<h2 class=\"major\">About</h2>\n\t\t\t<span class=\"image main\"><img src={steffen} alt=\"\" /></span>\n\t\t\t<p>The word <i>tyron</i> derives from the Greek <i>turannos</i> that means sovereign, and the purpose of the Tyron Self-Sovereign Identity Protocol is to give people sovereignty over their data. Sovereignty to empower our world by protecting nature and helping each other in times of need, selflessly.</p>\n\t\t\t<h3 class=\"major\">Self-sovereign identity (SSI)</h3>\n\t\t\t<p>Self-sovereign identity enables people to manage their digital, online identities - proving who they are without a middleman, by anchoring <Link to=\"/did\">decentralized identifiers</Link> on blockchain networks as a shared root of trust.</p>\n\t\t\t<p>Tyron self-sovereign identities will be able to share uncensorable information such as articles and encrypted messages, as well as make donations to aid natural and man-made disasters that endanger our planet's ecosystems. For that, we are developing the <Link to=\"/mapu\">.Mapu</Link> platform.</p>\n\t\t</div>\n\t);\n}\n\nexport default withRouter(About);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Did() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">Decentralized Identifiers</h2>\n            <p>The W3C Decentralized Identifier Working Group has developed the <a href=\"https://w3c.github.io/did-core/\">Decentralized Identifiers (DIDs) specification</a> that defines a DID as a unique identifier that enables verifiable, decentralized digital identity. The Tyron SSI Protocol is conformant with this specification by implementing the <a href=\"https://www.tyronzil.com/\">tyronzil DID Method</a> - listed in the <a href=\"https://w3c.github.io/did-spec-registries/\">W3C DID Specification Registries</a>.</p>\n            <p>A digital identity's decentralized identifier rely on public attributes described in its DID Document. Such attributes are service endpoints and verification methods.</p>\n            <section>\n            <h3 class=\"major\">Service endpoints</h3>\n                <p>Network addresses, such as an HTTP URL or blockchain address, at which services operate on behalf of the digital identity. Services can refer to privacy-preserving communication (DID Comm) and social networking apps, among others.</p>\n                <h3 class=\"major\">Verification methods</h3>\n                <p>Cryptographic key pairs allow the user to authenticate themselves or authorize transactions through digital signatures. Verification methods correspond to verification relationships such as:</p>\n                <ul>\n                <li><b>Authentication:</b> To, e.g., sign in to a service or website.</li>\n                <li><b>Assertion:</b> To sign claims in verifiable credentials.</li>\n                <li><b>Key agreement:</b> A public key of yours that people can use to encrypt confidential information into a message that only you can decrypt with your corresponding private key.</li>\n                <li><b>Capability invocation:</b> A key that invokes a cryptographic capability to, e.g., authorize the update of your DID Document.</li>\n                <li><b>Capability delegation:</b> To delegate a cryptographic capability to another party.</li>\n            </ul>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Did);\n","export default __webpack_public_path__ + \"static/media/incendios_chubut.a352c373.jpg\";","import React from \"react\";\nimport incendios_chubut from \"../images/incendios_chubut.jpg\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Mapu() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">The .Mapu platform</h2>\n            <p><b>.Mapu</b> will be a profit-sharing community advocating for more sustainable practices in our day-to-day life, such as waste management. On this platform, self-sovereign identities will share articles and encrypted messages (DID Comm) as well as peer-to-peer donations to support environmental movements.</p>\n            <p>You will be able to give your self-sovereign identity a <b>username.mapu</b> that represents you on this platform.</p>\n            <p>A lot of people care about our natural environment. However, information is scattered, like-minded communities disconnected from each other, and many of us don't know where to start. Global warming is a real threat, but humans make it worse by continuing the unsustainable exploitation of natural resources.</p>\n            <p>Change is coming, and we see it reflected in kids and young generations. Furthermore, indigenous people, such as native South Americans, have that respect for nature internalized in their cultures. But they were colonized and deprived of that. The Mapuche people of North Patagonia got attacked by the Argentinian and Chilean states in the late 19th century in one of the biggest genocides of modern history. But we are still here.</p>\n            <span class=\"image main\" style={{width:\"70%\"}}><img src={incendios_chubut} alt=\"\"/></span>\n            <p>Thousands of hectares got <a href=\"https://www.opendemocracy.net/en/democraciaabierta/patagonia-argentina-mining-indigenous-politics-fire/\">intentionally burnt in Patagonia in March 2021</a>, including national parks. Similar fires happened in Australia and the Amazon, killing everything in their paths. In the last year:</p>\n            <ul>\n                <li>More than 6,000,000 hectares burnt in Australia.</li>\n                <li>NASA satellites detected about 1.4 million anomalies in the southern Amazon, compared to 1.1 million in 2019. In the Pantanal along the border of Brazil, Paraguay, and Bolivia fires destroyed 4.4 million in 2020, about 28% of the Pantanal.</li>\n                <li>In Chubut province, Argentina, fires burnt more than 500 houses along seven towns - including areas in national parks.</li>\n            </ul>\n            <p> Many of us may come from different places, but we share moral values. Blockchain technologies can help us distribute information that cannot get censored and donate crypto assets peer-to-peer - we can protect nature and future generations.</p>\n            <section>\n                <h3 class=\"major\">Kvme Felen</h3>\n                <p>In the Mapuzungun language, <i>mapu</i> means earth/soil/ground - and <i>che</i> means people. Mapuche's vision is the <i>Kvme Felen</i>, or \"good living\", focused on building a society more just and with biodiversity - learning from the past and present to build a better future.</p>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Mapu);\n","import React from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Token() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">$AYJA Profit Sharing Token</h2>\n            <div>\n                <p>The <Link to=\"/mapu\">.Mapu</Link> platform will launch as a <a href=\"https://coinmarketcap.com/alexandria/article/profit-sharing-communities-a-deep-dive-by-arweave\">profit-sharing community (PSC)</a> with $AYJA as its profit-sharing token (PST). Although, only 35% of the tokens will be ever available to sell to investors. The remaining 65% will get managed by Tyron Pungtas, an open organization to become a  Community Interest Company. However, these profits will get yearly invested in a global sustainable project voted out by <Link to=\"/defi\">$TYRON</Link> token holders.</p>\n                <div class=\"table-wrapper\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>Value</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Ticker</td>\n                                <td>AYJA</td>\n                                <td>The unique symbol assigned to the .Mapu PST. Ayja is the number 9 in Mapuzungun.</td>\n                            </tr>\n                            <tr>\n                                <td>Max supply</td>\n                                <td>10,000,000</td>\n                                <td>The total amount of tokens that will get minted.</td>\n                            </tr>\n                            <tr>\n                                <td>Smallest unit</td>\n                                <td>EPU</td>\n                                <td>One $AYJA can get divided into 1,000,000,000 $EPU. Epu is the number 2 in Mapuzungun.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            <section style={{width:'100%'}}>\n                <h3>Travel Rule</h3>\n                <p>$AYJA holders can comply with the Financial Action Task Force (FATF) Travel Rule at the protocol level by enabling their SSI Travel Rule Passport that implements the <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">InterVASP Messaging Standard IVMS101</a> encrypted in their <Link to=\"/permawallet\">SSI Permawallet</Link>. To avoid illegal activities that harm society, such as terrorism financing and money laundering, developing into a web of trust.</p>\n                <p>Such a compliance mechanism makes $AYJA attractive to both retail and institutional investors. The private companies and non-profit organizations that integrate the Tyron Self-Sovereign Identity Protocol will comply with the FATF Travel Rule when requiring their customer base to enable their SSI Travel Rule Passport.</p>\n            \n                <h3 class=\"major\">$AYJA token allocations</h3>\n                <p>As a % out of the max supply:</p>\n                <Chart\n                    chartType=\"PieChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                        ['', ''],\n                        ['Investors', 35],\n                        ['Community Interest Company (CIC)', 65]\n                    ]}\n                    options={{\n                        is3D: true,\n                        backgroundColor: 'transparent',\n                        chartArea:{width:'100%', height:'100%', left: 96, right: 96},\n                        fontName: \"Source Sans Pro\",\n                        colors: [\"#32527b\", \"#aaa9ad\"],\n                        legend: {position: 'left', textStyle: {color: 'white', fontSize: 16, bold: 'true'}},\n                        tooltip: {text: 'percentage', textStyle: {bold: 'true'}},\n                    }}\n                    rootProps={{ 'data-testid': '1' }}\n                />\n            \n                <h3>Lock-up periods & distribution </h3>\n                <div class=\"table-wrapper\">\n                    <table class=\"alt\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>Allocation ($AYJA)</th>\n                                <th>Lock-up period</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Investors</td>\n                                <td>3,500,000</td>\n                                <td>Exponential decay</td>\n                            </tr>\n                            <tr>\n                                <td>Tyron Pungtas CIC</td>\n                                <td>6,500,000</td>\n                                <td>Permanent</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <p>(*) <em>% out of the allocated amount</em></p>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Token);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction DeFi() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">Decentralized finance</h2>\n            <section>\n                <p>The $TYRON decentralized finance token will get minted by the protocol to reward liquidity providers of the <Link to=\"/token\">$AYJA</Link> and $TYRON liquidity pools.</p>\n                <p>There will not be a pre-allocation of $TYRON tokens.</p>\n                <p>$TYRON will also get given as usage rewards on the <Link to=\"/mapu\">.Mapu</Link> platform.</p>\n            </section>\n            <section>\n                <h3 class=\"major\">Gas-free experience</h3>\n\t\t\t\t<p>More importantly, $TYRON liquidity pools on different blockchains, such as Arweave and Zilliqa, will allow the user to have a <i>gas-free</i> experience. The protocol will enable the self-sovereign identity to buy $TYRON on one blockchain, lock-it and sell it on a different network - to get the latter's native currency to pay for gas.</p>\n                <p>To execute a transaction on a new network for the first time, gas stations will exist to borrow gas from them. These stations will get provided by varied SSI Agents that the user will authorize to make a meta-transaction into their self-sovereign identity.</p>\n            </section>\t\n        </div>\n\t);\n}\n\nexport default withRouter(DeFi);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Permawallet() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">SSI Permawallet</h2>\n                <p>The amount of keys that a decentralized identity requires as <Link to=\"/did\">verification methods</Link> is an issue. Most wallets in the market rely on third parties, so the secure management of private keys can be a problem for the user - even more when they have private keys for different blockchains. The Tyron SSI Protocol Dapp solves this issue by implementing its own <a href=\"https://www.youtube.com/watch?v=LOrXOxc2yp0\">Decentralized Key Management System</a> on-chain on the immutable permaweb and backing up the user's SSI private keys into their Self-Sovereign Identity Permawallet.</p>\n                <p>An SSI Permawallet is a smart contract owned by its user where all keys got encrypted by the user's SSI Permaweb Key (their Arweave main key). Whenever necessary, the user can read the data from their on-chain wallet, decrypt it and use it to make the signatures required by their self-sovereign identity.</p>\n                <p>With an SSI Permawallet, the user must only worry about one private key: their SSI Permaweb Key. This improved user experience also brings to the user peace of mind that all their other private keys and personal information are encrypted, safely stored and always available on their on-chain wallet that lives on the permaweb - a decentralized, immutable and uncensorable Web 3.0.</p>\n            <section>\n                <h3>SSI Travel Rule Passport for multi-chain KYC</h3>\n                <p>The SSI Permawallet also stores the user's SSI Travel Rule Passport: An <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">IVMS101 message</a> that makes this self-hosted wallet compliant with the FATF Travel Rule. This passport has the user's personal information encrypted by the user's SSI Travel Rule Key. When executing a virtual asset transfer, the user attaches a copy of this key encrypted by the beneficiary's SSI Communication Key - so that the beneficiary, and only the beneficiary, can read their SSI Travel Rule Passport.</p>\n            </section>    \n            <section>\n                <h3>The SSI Communication Key</h3>\n                <p>Self-sovereign identities can send messages to each other, encrypting them with the receiver's SSI Communication Key - so that only the receiver can read them. For example, when sending a transfer, the originator can attach their SSI Travel Rule Key encrypted by the beneficiary's SSI Communication Key so they can read the originator's Travel Rule Passport.</p>\n                <h3 class=\"major\">Create your SSI Permawallet</h3>\n                <p>Go to the <Link to=\"/browser\">browser</Link>, choose a username and if it's available you will be available to take it for your self-sovereign identity.</p>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Permawallet);\n","export async function selectWeightedAyjaHolder(accounts) {\n    // Count the total tokens\n    let totalTokens = 0;\n    for (const username of Object.keys(accounts)) {\n      \ttotalTokens += accounts[username].balance;\n    }\n    // Create a copy of balances where the amount each holder owns is represented by a value 0-1\n    const weighted = {};\n    for (const username of Object.keys(accounts)) {\n\t\tconst addr = accounts[username].ssi;\n      \tweighted[addr] = accounts[username].balance / totalTokens;\n    }\n  \n    let sum = 0;\n    const r = Math.random();\n    for (const address of Object.keys(weighted)) {\n\t\tsum += weighted[address];\n\t\tif (r <= sum && weighted[address] > 0.0001) {\n\t\t\treturn address;\n\t\t}\n    }\n    throw new Error('Unable to select token holder.');\n}\n  ","import React, { useState } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Arweave from 'arweave';\nimport * as SmartWeave from 'smartweave';\nimport { ayjaPstStateID, ConnectWallet } from \".\";\nimport { selectWeightedAyjaHolder } from \"../lib/select-weighted-ayja-holder\";\n\nfunction Browser() {\n    const[username, setUsername] = useState('');\n    const[domain, setDomain] = useState('mapu');\n    const[account, setAccount] = useState({});\n    const[pscMember, setPscMember] = useState('');\n    const[taken, setTaken] = useState('no');\n\n    const handleUsername = event => {\n        event.preventDefault();\n        setUsername(event.target.value);\n    };\n    const handleDomain = event => {\n        setDomain(event.target.value);\n    };\n    const handleReset = () => {\n        setAccount({});\n        setPscMember('');\n        setAccount({});\n        setTaken('no');\n    };\n\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">Browser</h2>\n            <section style={{width:'100%'}}>\n                <p>Search for a self-sovereign identity by username and domain:</p>\n                <div class=\"table-wrapper\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Domain</th>\n                                <th></th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>.mapu</td>\n                                <td>Access any <Link to=\"/mapu\">.Mapu</Link> profile or create yours!</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <form onChange={ handleReset } onSubmit= { e => e.preventDefault() }>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <label>Username</label>\n                            <input type=\"text\" onChange={ handleUsername } />\n                        </div>\n                        <div class=\"field half\">\n                            <label for=\"domain\">Domain</label>\n                            <select onChange={ handleDomain }>\n                                <option value=\"mapu\">.mapu</option>\n                            </select>\n                        </div>\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input class=\"button primary\" type=\"button\" value=\"Search\"\n                                onClick={ async() => {\n                                    const arweave = Arweave.init({\n                                        host: 'arweave.net',\n                                        port: 443,\n                                        protocol: 'https'\n                                    });\n                                    const ayjaState = await SmartWeave.readContract(arweave, ayjaPstStateID);\n                                    const pscMember = await selectWeightedAyjaHolder(ayjaState.accounts);\n                                    setPscMember(pscMember);\n\n                                    if( ayjaState.accounts[username] !== undefined ) {\n                                        setAccount(ayjaState.accounts[username]);\n                                        setTaken('yes');\n                                    };\n                                }}\n                                />\n                        </li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ handleReset } /></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{width:'100%'}}>\n                { pscMember !== '' && <ConnectWallet taken={ taken } username={ username } domain={ domain } account={ account } pscMember={ pscMember }/>}\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Browser);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Contact() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{marginBottom: '2%'}}><Link to=\"/\">🔙</Link></span>\n            <h2 class=\"major\">Join us</h2>\n            <p>Would love to hear from you!</p>\n            <p>eMail: pungtas@pm.me</p>\n            <ul class=\"icons\">\n                <li><a href=\"https://twitter.com/ssiprotocol\" class=\"icon brands fa-twitter\"><span class=\"label\">Twitter</span></a></li>\n                <li><a href=\"https://github.com/pungtas\" class=\"icon brands fa-github\"><span class=\"label\">GitHub</span></a></li>\n                <li><a href=\"https://www.youtube.com/channel/UCmzZR1G-g0Kq97j4dGx06eA\" class=\"icon brands fa-youtube\"><span class=\"label\">YouTube</span></a></li>\n            </ul>\t\n        </div>\n\t);\n}\n\nexport default withRouter(Contact);\n","export async function generateRandomBytes(length) {\n    const array = new Uint8Array(length);\n    window.crypto.getRandomValues(array);\n    return array;\n}","import { generateRandomBytes } from './crypto-util';\nimport Arweave from 'arweave';\n\nexport async function generatePublicEncryption(privKey) {\n    let privateKey = Object.create(privKey);\n    const algo = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };\n    const keyData = {\n        kty: \"RSA\",\n        e: \"AQAB\",\n        n: privateKey.n,\n        alg: 'RSA-OAEP-256',\n        ext: true\n    };                                \n    const publicKey = await crypto.subtle.importKey('jwk', keyData, algo, false, ['encrypt']);\n    const keyBuf = await generateRandomBytes(256);\n    const encryptedPublicKey = await window.crypto.subtle.encrypt({ name: 'RSA-OAEP' }, publicKey, keyBuf);\n    let publicEncryption = Arweave.utils.concatBuffers([encryptedPublicKey, keyBuf]);\n    publicEncryption = Arweave.utils.bufferTob64Url(publicEncryption);\n    return publicEncryption;\n}\n\nexport async function generateSsiKeys(arweave) {\n    const privateKey = await arweave.wallets.generate();\n    const keyData = {\n        kty: privateKey.kty,\n        e: privateKey.e,\n        n: privateKey.n,\n        alg: 'RSA-OAEP-256',\n        ext: true\n    };\n    const algo = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };                                    \n    const publicKey = await crypto.subtle.importKey('jwk', keyData, algo, false, ['encrypt']);\n    const keyBuf = await generateRandomBytes(256);\n    const encryptedPublicKey = await window.crypto.subtle.encrypt({ name: 'RSA-OAEP' }, publicKey, keyBuf);\n    let publicEncryption = Arweave.utils.concatBuffers([encryptedPublicKey, keyBuf]);\n    publicEncryption = Arweave.utils.bufferTob64Url(publicEncryption);\n    \n    return {\n        privateKey: privateKey,\n        publicEncryption: publicEncryption      \n    }\n}\n\nexport async function encryptKey(arConnect, key) {\n    let encryptedKey = await arConnect.encrypt(\n        JSON.stringify(key),\n        {\n            algorithm: 'RSA-OAEP',\n            hash: 'SHA-256'\n        }\n    );\n    encryptedKey = Arweave.utils.bufferTob64Url(encryptedKey); \n    return encryptedKey;\n}\n\nexport async function decryptKey(arConnect, encryptedKey) {\n    const encryptedArray = Arweave.utils.b64UrlToBuffer(encryptedKey);\n    const decryptedKey = await arConnect.decrypt(\n        encryptedArray,\n        {\n            algorithm: 'RSA-OAEP',\n            hash: 'SHA-256'\n        }\n    );\n    return decryptedKey;\n}\n\nexport async function encryptData(data, publicEncryption) {\n    const publicEnc = Arweave.utils.b64UrlToBuffer(publicEncryption);\n    const encKey = new Uint8Array(publicEnc.slice(0, 512));\n    const keyBuf = new Uint8Array(publicEnc.slice(512))\n\n    const contentBuf = new TextEncoder().encode(JSON.stringify(data));\n    \n    const encryptedContent = await Arweave.crypto.encrypt(contentBuf, keyBuf);\n    let encryptedData = Arweave.utils.concatBuffers([encKey, encryptedContent]);\n    encryptedData = Arweave.utils.bufferTob64Url(encryptedData);\n    \n    return encryptedData;\n}\n\nexport async function decryptData(data, decKey) {\n    const encryptedArray = Arweave.utils.b64UrlToBuffer(data);\n    let encryptedBuffer = encryptedArray.buffer;\n    const encKey = new Uint8Array(encryptedBuffer.slice(0, 512));\n    const encryptedData = new Uint8Array(encryptedBuffer.slice(512));\n\n    let key = Object.create(decKey);\n    key.alg = 'RSA-OAEP-256';\n    key.ext = true;\n    const algo = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };\n    key = await crypto.subtle.importKey('jwk', key, algo, false, ['decrypt']);\n    const symmetricKey = await window.crypto.subtle.decrypt({ name: 'RSA-OAEP' }, key, encKey)\n\n    let decryptedData = await Arweave.crypto.decrypt(encryptedData, symmetricKey);\n    decryptedData = Arweave.utils.bufferToString(decryptedData);\n    return decryptedData;\n}\n","import React, { useState } from \"react\";\nimport Arweave from 'arweave';\nimport * as SmartWeave from 'smartweave';\nimport * as DKMS from '../lib/dkms';\n\nfunction Profile({ username, domain, account, arweave, arconnect, keyfile }) {\n    const[donationAmount, setDonationAmount] = useState('');\n    const handleDonationAmount = event => {\n        setDonationAmount(event.target.value);\n    };\n\n    const[message, setMessage] = useState('');\n    const handleMessage = event => {\n        setMessage(event.target.value);\n    };\n\n\treturn(\n\t\t<div id=\"main\">\n            <section style={{width:\"100%\"}}>\n            <h3 class=\"major\" style={{ marginTop: \"4%\" }}>{ username }.{ domain } profile</h3>\n                <h4 class=\"major\">Articles</h4>\n                <p>Coming soon!</p>\n                <h4 class=\"major\">Donations</h4>\n                <p>Show your support:</p>\n                <form><div class=\"fields\">\n                    <div class=\"field half\"> \n                        <input type=\"text\" placeholder=\"Amount\" onChange={handleDonationAmount} /></div>\n                    <div class=\"field half\">\n                        <input type=\"button\" class=\"button primary\" value=\"Donate $AR\"\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ) {\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n                                    if (window.confirm(`You are about to donate ${donationAmount} $AR to '${ username }.${ domain }'. Click OK to proceed.`)) {\n                                        let tx;\n                                        if( arconnect !== ''){\n                                            tx = await arweave.createTransaction({\n                                                ttarget: account.ssi,\n                                                quantity: arweave.ar.arToWinston(donationAmount)\n                                            });\n                                            await arweave.transactions.sign(tx);\n                                        } else{\n                                            tx = await arweave.createTransaction({\n                                                target: account.ssi,\n                                                quantity: arweave.ar.arToWinston(donationAmount)\n                                            },\n                                            keyfile\n                                            );\n                                            await arweave.transactions.sign(tx, keyfile);\n                                        }\n                                        const result = await arweave.transactions.post(tx);\n                                        alert(`Transaction: ${ JSON.stringify(tx) }. Status: ${ result.status }`);\n                                    }\n                                } catch (error) {\n                                    alert(error)\n                                }\n                            }}\n                        />\n                    </div>\n                </div></form>\n            </section>\n            { account.wallet !== \"\" &&\n                <section style={{width:\"100%\"}}>\n                    <h4 class=\"major\">SSI Communication</h4>\n                    <p>Send them an encrypted message:</p>\n                    <form method=\"post\" action=\"#\">\n                        <div class=\"fields\">\n                            <div class=\"field\">\n                                <textarea onChange={ handleMessage }rows=\"4\"></textarea>\n                            </div>\n                        </div>\n                        <ul class=\"actions\">\n                            <li><input type=\"button\" class=\"button primary\" value=\"Encrypt & send\"\n                                onClick={ async() => {\n                                    try {\n                                        if( keyfile === '' &&  arconnect === '' ) {\n                                            throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                        }\n\n                                        const userPermawallet = await SmartWeave.readContract(arweave, account.wallet);\n                                        const userSsiComm = userPermawallet.ssiComm;\n                                        const encryptedMessage = await DKMS.encryptData(message, userSsiComm);\n                                        \n                                        if (window.confirm(`You are about to send a message to ${ username }.${ domain }'. Click OK to proceed.`)) {\n                                            let tx;\n                                            if( arconnect !== ''){\n                                                tx = await arweave.createTransaction({\n                                                    target: account.ssi,\n                                                    data: Arweave.utils.concatBuffers([encryptedMessage]),\n                                                    quantity: arweave.ar.arToWinston('0')\n                                                });\n                                                await arweave.transactions.sign(tx);\n                                            } else{\n                                                tx = await arweave.createTransaction({\n                                                    target: account.ssi,\n                                                    data: Arweave.utils.concatBuffers([encryptedMessage]),\n                                                    quantity: arweave.ar.arToWinston('0')\n                                                },\n                                                keyfile\n                                                );\n                                                await arweave.transactions.sign(tx, keyfile);    \n                                            }\n                                            const result = await arweave.transactions.post(tx);\n                                            alert(`Transaction: ${ JSON.stringify(tx) }. Status: ${ result.status }`);\n                                        }\n                                    } catch (error) {\n                                        alert(error)\n                                    }\n                                }}\n                            /></li>\n                            <li><input type=\"reset\" value=\"Reset\" /></li>\n                        </ul>\n                    </form>\n                </section>\n            }\t\n        </div>\n\t);\n}\n\nexport default Profile;\n","import React, { useState, useEffect } from \"react\";\nimport useArConnect from 'use-arconnect';\nimport { withRouter } from \"react-router-dom\";\nimport { Settings, Profile, CreateAccount } from \".\";\nimport Arweave from 'arweave';\n\nfunction ConnectWallet({ taken, username, domain, account, pscMember }) {   \n    const[value, setValue] = useState('Connect with ArConnect');\n    const[addr, setAddr] = useState('');\n    const[arconnect, setArconnect] = useState('');\n    const[keyfile, setKeyfile] = useState('');\n\n    const arConnect = useArConnect();\n    const arweave = Arweave.init({\n        host: 'arweave.net',\n        port: 443,\n        protocol: 'https'\n    });\n\n    useEffect(() => {\n        if (!arConnect) return;\n        (async () => {\n            try {\n                const permissions = await arConnect.getPermissions();\n                if (permissions.includes(\"ACCESS_ADDRESS\")) {\n                    setAddr(await arConnect.getActiveAddress());\n                    setValue('Disconnect');\n                    window.addEventListener(\"walletSwitch\", e => { setAddr(e.detail.address)});\n                    setArconnect(arConnect);\n                }\n            } catch {}\n        })();\n    }, [arConnect]);\n\n    const fileInput = React.createRef();\n\n    const handleKeyFile = event => {\n        event.preventDefault();\n        alert(`Selected file: ${fileInput.current.files[0].name}`);\n        const fr = new FileReader();\n        fr.onload = function (e) {\n            const file = JSON.parse(e.target.result);\n            setKeyfile(file);\n        };\n        fr.readAsText(fileInput.current.files[0]);\n    };\n\n    return(\n\t\t<div id=\"main\">\n            <section>\n                <input class=\"button\" type=\"button\" value={ value }\n                    onClick={ async() => {\n                        switch (value) {\n                            case \"Disconnect\":\n                                await arConnect.disconnect()\n                                setValue('Connect with ArConnect');\n                                setArconnect('');\n                                alert(`Your wallet got successfully disconnected.`)\n                                return;\n                            default:\n                                const permissions = [\n                                    \"ACCESS_ADDRESS\",\n                                    \"SIGN_TRANSACTION\",\n                                    \"ENCRYPT\",\n                                    \"DECRYPT\"\n                                ]\n                                try {\n                                    if (!arConnect) {\n                                        if (window.confirm(\"You have to download the ArConnect browser extension. Click OK to get redirected.\")) {\n                                            window.open(\"https://arconnect.io/\")\n                                        }                    \n                                    } else {\n                                        await arConnect.connect(permissions);\n                                        setAddr(await arConnect.getActiveAddress());\n                                        setValue(\"Disconnect\");\n                                        setArconnect(arConnect);\n                                    }\n                                    } catch(err) {\n                                alert(`${err}.`)\n                                }\n                                break;\n                        }\n                    }}\n                />\n            </section>\n            <section style={{ marginTop: \"3%\" }}>\n                <h4>Choose a keyfile with your SSI Permaweb Key:</h4>\n                <input type=\"file\" ref={ fileInput } onChange={ handleKeyFile } />\n                <input class=\"button\" type=\"button\" value=\"Save keyfile\"\n                    onClick={ async() => {\n                        if( keyfile !== ''){\n                            const address = await arweave.wallets.jwkToAddress(keyfile);\n                            alert(`The address of this keyfile is: ${address}`)\n                            setAddr(address);\n                        } else{\n                            alert(`Address not retrieved from keyfile.`)\n                        }\n                    }}\n                />\n            </section>\n            <section style={{ width:'100%' }}>\n                { account.ssi === addr && <Settings username={ username } domain={ domain } account={ account } pscMember={ pscMember } arweave={ arweave } arconnect={ arconnect } keyfile={ keyfile } /> }\n                { taken === \"yes\" && account.ssi !== addr && <Profile username={ username } domain={ domain } account={ account } arweave={ arweave } arconnect={ arconnect } keyfile={ keyfile } /> }\n                { taken === \"no\" && <CreateAccount username={ username } domain={ domain } address={ addr } pscMember={ pscMember } arweave={ arweave } arconnect={ arconnect } keyfile={ keyfile } /> }\n            </section>\n        </div>\n        \n\t);\n}\n\nexport default withRouter(ConnectWallet);\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID, permawalletTemplateID, permawalletSourceID } from \".\";\nimport * as DKMS from '../lib/dkms';\nimport * as SmartWeave from 'smartweave';\n\nfunction CreateAccount({ username, domain, address, pscMember, arweave, arconnect, keyfile }) {\n    const message = {\n        firstName: \"\",\n        lastName: \"\",\n        streetName: \"\",\n        buildingNumber: \"\",\n        country: \"\"\n    };\n    const[ivms101, setIvms101] = useState(message);\n    const[firstName, setFirstName] = useState('');\n    const[lastName, setLastName] = useState('');\n    const[streetName, setStreetName] = useState('');\n    const[buildingNumber, setBuildingNumber] = useState('');\n    const[country, setCountry] = useState('');\n\n    const handleFirstName = event => {\n        setFirstName(event.target.value);\n    };\n    const handleLastName = event => {\n        setLastName(event.target.value);\n    };\n    const handleStreetName = event => {\n        setStreetName(event.target.value);\n    };\n    const handleBuildingNumber = event => {\n        setBuildingNumber(event.target.value);\n    };\n    const handleCountry = event => {\n        setCountry(event.target.value);\n    };\n\n\treturn(\n\t\t<div id=\"main\" style={{ marginTop: \"4%\", width: \"100%\"}} >\n            <h3 style={{ width: \"100%\"}} >{ username }.{ domain } is available</h3>\n            <section style={{ width: \"100%\" }}>\n                <h4 class=\"major\">Generate your SSI Travel Rule Passport</h4>\n                <p>Create an <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">IVMS101 message</a> for KYC to make your self-hosted wallet compliant with the FATF Travel Rule to counteract money laundering and terrorism financing, and thus building a web of trust. This personal information will get encrypted by an SSI Travel Rule Key generated by your SSI Permawallet - only you decide who can read this message. You won't need to give this information anymore to third parties, over and over again. Your SSI Travel Rule - private - Key will get encrypted by your SSI Permaweb Key and saved into your wallet, so only you can access it. When making a transfer, you will have the option to attach this secret encrypted by the beneficiary's SSI Communication Key so they can read your Travel Rule Passport.</p>\n                    <form>\n                        <div class=\"fields\">\n                            <div class=\"field half\">\n                                <label>First name</label>\n                                <input type=\"text\" onChange={ handleFirstName } />\n                            </div>\n                            <div class=\"field half\">\n                                <label>Last name</label>\n                                <input type=\"text\" onChange={ handleLastName } />\n                            </div>\n                        </div>\n                        <section style={{width:'100%', marginBottom:\"3%\"}}>\n                            <h4>Residential address</h4>\n                            <div class=\"fields\">\n                                <input type=\"text\" placeholder=\"Street name\" onChange={ handleStreetName } />\n                            </div>\n                        </section>\n                        <div class=\"fields\">\n                            <div class=\"field half\">\n                                <input type=\"text\" placeholder=\"Building number\" onChange={ handleBuildingNumber } />\n                            </div>\n                            <div class=\"field half\">\n                                <select onChange={ handleCountry }>\n                                    <option value=\"\" disabled selected>Select country of residence</option>\n                                    <option value=\"Argentina\">Argentina</option>\n                                    <option value=\"Denmark\">Denmark</option>\n                                    <option value=\"Singapore\">Singapore</option>\n                                    <option value=\"United Kingdom\">United Kingdom</option>\n                                </select>\n                            </div>\n                        </div>\n                        <ul class=\"actions\">\n                            <li><input class=\"button primary\" type=\"button\" value=\"Save SSI Travel Rule Passport\"\n                                    onClick={ () => {\n                                        setIvms101({\n                                            firstName: firstName,\n                                            lastName: lastName,\n                                            streetName: streetName,\n                                            buildingNumber: buildingNumber,\n                                            country: country\n                                        })\n                                        alert(\"Information received.\")\n                                    }}\n                                    />\n                            </li>\n                            <li><input type=\"reset\" value=\"Reset\" /></li>\n                        </ul>\n                    </form>\n            </section>\n            <section style={{ width: \"100%\" }}>\n                <h4 class=\"major\">Create your SSI Permawallet for { username }.{ domain }</h4>\n                <ul class=\"actions\">\n                    <li><input type=\"button\" class=\"button primary\" value='Deploy Self-Sovereign Identity Permawallet'\n                        onClick={ async() => {\n\n                            try {\n                                if( keyfile === '' &&  arconnect === '' ) {\n                                    throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                }\n                                // SSI Communication Keys\n                                const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                \n                                // Travel Rule Passport\n                                const trSsiKeys = await DKMS.generateSsiKeys(arweave);\n                                const encryptedTrPassport = await DKMS.encryptData(ivms101, trSsiKeys.publicEncryption);\n                                alert(`This is your encrypted SSI Travel Rule Passport: ${ encryptedTrPassport }`);\n                                \n                                // Encrypt private keys\n                                let ssiCommPrivate;\n                                let ssiTravelRulePrivate;\n                                if( arconnect !== '' ){\n                                    ssiCommPrivate = await DKMS.encryptKey(arconnect, ssiCommKeys.privateKey);\n                                    ssiTravelRulePrivate = await DKMS.encryptKey(arconnect, trSsiKeys.privateKey);\n                                } else{\n                                    const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                    ssiCommPrivate = await DKMS.encryptData(ssiCommKeys.privateKey, publicEncryption);\n                                    ssiTravelRulePrivate = await DKMS.encryptData(trSsiKeys.privateKey, publicEncryption);\n                                }\n                                \n                                /*For testing\n                                const decryptedTrSsiKey = await DKMS.decryptData(ssiTravelRulePrivate, keyfile);\n                                alert(`SSI TR decrypted key: ${decryptedTrSsiKey}`);\n                                const decryptedTrPassport = await DKMS.decryptData(encryptedTrPassport, JSON.parse(decryptedTrSsiKey));\n                                alert(decryptedTrPassport);\n                                */\n\n                                // Permawallet initial state\n                                \n                                let permawalletInitState = await SmartWeave.readContract(arweave, permawalletTemplateID.toString());\n                                permawalletInitState.ssi = address;\n                                permawalletInitState.ssiComm = ssiCommKeys.publicEncryption;\n                                permawalletInitState.trp.message = encryptedTrPassport;\n                                permawalletInitState.trp.key = ssiTravelRulePrivate;\n                                permawalletInitState.keys.ssiComm = ssiCommPrivate;\n                                \n                                // Fee paid to the PSC\n        \n                                const fee = arweave.ar.arToWinston('0.1');\n                                let tx;\n\n                                if( arconnect !== ''){\n                                    if (window.confirm(\"The fee to create your SSI Permawallet is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.\")) {\n                                        if( pscMember === address ){\n                                            alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                            tx = await arweave.createTransaction(\n                                                { \n                                                    data: JSON.stringify(permawalletInitState) \n                                                }\n                                            ).catch( err => { throw err });\n                                        } else {\n                                            tx = await arweave.createTransaction(\n                                                {\n                                                    data: JSON.stringify(permawalletInitState),\n                                                    target: pscMember.toString(),\n                                                    quantity: fee.toString(),\n                                                }\n                                            );\n                                        }\n                                        tx.addTag('Dapp', 'tyron');\n                                        tx.addTag('App-Name', 'SmartWeaveContract');\n                                        tx.addTag('App-Version', '0.3.0');\n                                        tx.addTag('Contract-Src', permawalletSourceID.toString());\n                                        tx.addTag('Content-Type', 'application/json');\n                                            \n                                        await arweave.transactions.sign(tx).catch( err => { throw err });\n                                        await arweave.transactions.post(tx).catch( err => { throw err });\n                                    }\n                                } else{\n                                    if (window.confirm(\"The fee to create your SSI Permawallet is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.\")) {\n                                        if( pscMember === address ){\n                                            alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                            tx = await SmartWeave.createContractFromTx(\n                                                arweave,\n                                                keyfile,\n                                                permawalletSourceID.toString(),\n                                                JSON.stringify(permawalletInitState)\n                                            ).catch( err => { throw err });\n                                        } else {\n                                            tx = await SmartWeave.createContractFromTx(\n                                                arweave,\n                                                keyfile,\n                                                permawalletSourceID.toString(),\n                                                JSON.stringify(permawalletInitState),\n                                                [],\n                                                pscMember,\n                                                fee\n                                            ).catch( err => { throw err });\n                                        }\n                                    }\n                                }\n                                alert(`Your permawallet ID is: ${ JSON.stringify(tx.id) }`);\n                                \n                                const dnsInput = {\n                                    username: username,\n                                    dnsSsi: address,\n                                    dnsWallet: tx\n                                };\n                                \n                                let dnsTx;\n                                if( arconnect !== ''){\n                                    if (window.confirm(`The fee to get ${ username }.${ domain } is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.`)) {\n                                        if( pscMember === address ){\n                                            alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                            dnsTx = await arweave.createTransaction(\n                                                { \n                                                    data: Math.random().toString().slice(-4) \n                                                }\n                                            ).catch( err => { throw err });\n                                        } else {\n                                            dnsTx = await arweave.createTransaction(\n                                                {\n                                                    data: Math.random().toString().slice(-4),\n                                                    target: pscMember.toString(),\n                                                    quantity: fee.toString(),\n                                                }\n                                            ).catch( err => { throw err });\n                                        }\n                                        dnsTx.addTag('Dapp', 'tyron');\n                                        dnsTx.addTag('App-Name', 'SmartWeaveAction');\n                                        dnsTx.addTag('App-Version', '0.3.0');\n                                        dnsTx.addTag('Contract', ayjaPstStateID.toString());\n                                        dnsTx.addTag('Input', JSON.stringify(dnsInput));\n\n                                        await arweave.transactions.sign(dnsTx).catch( err => { throw err });\n                                        await arweave.transactions.post(dnsTx).catch( err => { throw err });\n                                    }\n                                } else{\n                                    if (window.confirm(`The fee to get ${ username }.${ domain } is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.`)) {\n                                        if( pscMember === address ){\n                                            alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                            dnsTx = await SmartWeave.interactWrite(\n                                                arweave,\n                                                keyfile,\n                                                ayjaPstStateID.toString(),\n                                                dnsInput        \n                                            ).catch( err => { throw err });\n                                        } else {\n                                            dnsTx = await SmartWeave.interactWrite(\n                                                arweave,\n                                                keyfile,\n                                                ayjaPstStateID.toString(),\n                                                dnsInput,\n                                                [],\n                                                pscMember.toString(),\n                                                fee.toString()\n                                            ).catch( err => { throw err });\n                                        }\n                                    }\n                                }\n                                alert(`Your DNS transaction ID is: ${ JSON.stringify(dnsTx.id) }`);\n                            \n                            } catch (error) {\n                                alert(error)\n                            }\n                        }}\n                    /></li>\n                    <li><input type=\"button\" class=\"button\" value='Sign in'\n                        onClick={ () => {\n                            alert('To sign in: go back to the browser, search for your username, and connect your SSI Permaweb Key.')\n                        }}\n                    /></li>\n                </ul>\n            </section>                \n        </div>\n\t);\n}\n\nexport default CreateAccount;\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID } from \".\";\nimport * as DKMS from '../lib/dkms';\nimport * as SmartWeave from \"smartweave\";\n\nfunction Settings({ username, domain, account, pscMember, arweave, arconnect, keyfile }) {\n    const[update, setUpdate] = useState('');\n    const handleUpdate = event => {\n        setUpdate(event.target.value);\n    };\n\n    const[newAddress, setNewAddress] = useState('');\n    const handleNewAddress = event => {\n        setNewAddress(event.target.value);\n    };\n\n    const[keyId, setKeyId] = useState('');\n    const handleKeyId = event => {\n        setKeyId(event.target.value);\n    };\n\n    const[specificId, setSpecificId] = useState('');\n    const handleSpecificId = event => {\n        setSpecificId(event.target.value);\n    };\n\n    return(\n\t\t<div id=\"main\" style={{ marginTop:\"4%\" }}>\n            <section style={{ width: \"100%\" }}>\n                <h4>Hi { username }.{ domain }, welcome back!</h4>\n                <h3 class=\"major\">Your settings</h3>\n                <h4 class=\"major\">Update an address</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleUpdate }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiAyja\">SSI address in $AYJA</option>\n                                <option value=\"permawallet\">Permawallet address</option>\n                                <option value=\"ssiPermawallet\">SSI address in permawallet</option>\n                            </select>\n                        </div>\n                        \n                        { update !== \"\" && <div class=\"field half\"><input type=\"text\" placeholder=\"New address\" onChange={ handleNewAddress } /></div> }\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class=\"button\" value=\"Update\"\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    let input;\n                                    let contractId;\n                                    switch (update) {\n                                        case 'ssiAyja':\n                                            input = {\n                                                function: 'updateSsi',\n                                                username: username,\n                                                ssi: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;\n                                            break;\n                                        case 'permawallet':\n                                            input = {\n                                                function: 'updateWallet',\n                                                username: username,\n                                                oWallet: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;  \n                                            break;\n                                        case 'ssiPermawallet':\n                                            input = {\n                                                function: 'ssi',\n                                                ssi: newAddress\n                                            };\n                                            contractId = account.wallet;\n                                            break;                                        \n                                        default:\n                                            throw new Error('Wrong selection.');\n                                    }\n                                    \n                                    const fee = arweave.ar.arToWinston('0.1');\n                                    \n                                    let tx;\n                                    if( arconnect !== '' ){\n                                        if (window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else {\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', contractId.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n    \n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });                                    \n                                        }\n                                    } else {\n                                        if (window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input).catch( err => { throw err });\n                                            } else {\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input, [], pscMember, fee).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    alert(`Transaction ID: ${tx}`);                             \n                                } catch (error) {\n                                    alert(error)\n                                }\n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setUpdate(\"\") }} /></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\" }}>\n                <h4 class=\"major\">Generate a new key</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleKeyId }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiComm\">SSI Communication Key</option>\n                                <option value=\"byId\">Key by ID</option>\n                            </select>\n                        </div>\n                        \n                        { keyId === \"byId\" && <div class=\"field half\"><input type=\"text\" placeholder=\"Key ID\" onChange={ handleSpecificId } /></div> }\n                    </div>    \n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class=\"button\" value=\"Encrypt and save in your permawallet\"\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    if( !account.wallet || account.wallet === \"\") {\n                                        throw new Error(`It seems like you don't have any SSI Permawallet registered.`);\n                                    }\n\n                                    if( arconnect !== '' ){ \n                                        throw new Error(`Please use a keyfile instead.`);\n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptKey(arconnect, ssiCommKeys.privateKey);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssiComm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptKey(arconnect, keys.privateKey);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if (window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                const tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet, input);\n                                                alert(`Transaction ID: ${tx}`);\n                                            } else {\n                                                const tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet, input, [], pscMember, fee);\n                                                alert(`Transaction ID: ${tx}`);\n                                            }                                       \n                                        }\n                                    } else {\n                                        const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptData(ssiCommKeys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssiComm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptData(keys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if (window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the $AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                const tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet, input);\n                                                alert(`Transaction ID: ${tx}`);\n                                            } else {\n                                                const tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet, input, [], pscMember, fee);\n                                                alert(`Transaction ID: ${tx}`);\n                                            }                                       \n                                        }\n                                    }\n                                } catch (error) {\n                                    alert(error)\n                                }                            \n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setKeyId(\"\") }}/></li>\n                    </ul>\n                </form>\n            </section>\n        </div>\n\t);\n}\n\nexport default Settings;\n","export { default as Header } from \"./header\";\nexport { default as Footer } from \"./footer\";\nexport { default as Home } from \"./home\";\nexport { default as About } from \"./about\";\nexport { default as Did } from \"./did\";\nexport { default as Mapu } from \"./mapu\";\nexport { default as Token } from \"./token\";\nexport { default as DeFi } from \"./defi\";\nexport { default as Permawallet } from \"./permawallet\";\nexport { default as Browser } from \"./browser\";\nexport { default as Contact } from \"./contact\";\nexport { default as Profile } from \"./profile\";\nexport { default as ConnectWallet } from \"./connectWallet\";\nexport { default as CreateAccount } from \"./createAccount\";\nexport { default as Settings } from \"./settings\";\n\nexport const ayjaPstStateID = \"4TTYBIuO2icJIvdSnJVXmu9jqiyxAo8MCDCq9Xrh8B4\";\nexport const ayjaPstSourceID = \"XTJEF0wCjgpxPV90Q1IMISn3pr3CRg4Wd5_ep6duH4w\";\nexport const permawalletTemplateID = \"0J63QHL7flv8l6s41YWNfaHtPM0i7VIVfNLBXz-vQFs\";\nexport const permawalletSourceID = \"0fAnXig88tx4Bk7CdFcOf_Juu_Z0ecGNppis-UAcCLc\";","import './styles/css/main.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Header, Footer, Home, About, Did, Mapu, Token, DeFi, Permawallet, Browser, Contact} from \"./components\";\n\nfunction App() {\n\treturn(\n\t\t<div id=\"wrapper\">\n\t\t\t<Router>\n\t\t\t\t<Header/>\n\t\t\t\t<Switch>\n\t\t\t\t<Route path=\"/\" exact component={() => <Home />} />\t\n\t\t\t\t<Route path=\"/about\" exact component={() => <About />} />\n\t\t\t\t<Route path=\"/did\" exact component={() => <Did />} />\n\t\t\t\t<Route path=\"/mapu\" exact component={() => <Mapu />} />\n\t\t\t\t<Route path=\"/token\" exact component={() => <Token />} />\n\t\t\t\t<Route path=\"/defi\" exact component={() => <DeFi />} />\n\t\t\t\t<Route path=\"/permawallet\" exact component={() => <Permawallet />} />\n\t\t\t\t<Route path=\"/browser\" exact component={() => <Browser />} />\n\t\t\t\t<Route path=\"/contact\" exact component={() => <Contact />} />\n\t\t\t\t</Switch>\n\t\t\t\t<Footer />\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/main.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}