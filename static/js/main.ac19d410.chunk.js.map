{"version":3,"sources":["context/user/types.ts","context/user/index.ts","constants/routes.ts","context/index.tsx","utils/context.ts","components/Header/index.tsx","components/Footer/index.tsx","components/Home/index.tsx","components/Domains/index.tsx","components/Contact/index.tsx","components/PublicProfile/index.tsx","constants/arconnect.ts","config/arweave.ts","components/PrivateProfile.js","constants/tyron.ts","constants/domains.ts","components/SearchBar/index.tsx","App.tsx","reportWebVitals.js","index.tsx","components/SearchBar/styles.module.scss","components/Home/styles.module.scss"],"names":["ACTION_TYPES","Routes","userReducer","state","action","type","SET_AR_ADDRESS","address","payload","CLEAR_AR_ADDRESS","globalState","user","arweaveSecretKey","zilliqaSecretKey","defaultState","defaultDispatcher","stateContext","createContext","dispatchContext","useDispatch","useContext","useSelector","selector","contextFactory","globalReducer","Header","id","className","Footer","style","marginTop","href","Home","styles","container","nav","to","Domains","role","aria-label","marginBottom","width","textAlign","Contact","listStyle","PublicProfile","PERMISSIONS_TYPES","ACCESS_ADDRESS","SIGN_TRANSACTION","ENCRYPT","DECRYPT","Arweave","init","host","port","protocol","PrivateProfile","SMART_CONTRACTS","BASE_URL","DOMAINS","VALID_SMART_CONTRACTS","INIT","DID","xWALLET","SSI","PST","PSTi","xPSTi","pWALLET","SMART_CONTRACTS_URLS","SearchBar","useState","value","setValue","name","setName","domain","setDomain","error","setError","searchBar","onKeyPress","key","TYRON","includes","window","open","console","log","onChange","currentTarget","split","errorMsg","App","useReducer","dispatch","Provider","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.ac19d410.chunk.js","sourcesContent":["import { TNullable } from '../../interfaces/IData';\n\nexport enum ACTION_TYPES {\n  SET_AR_ADDRESS = \"SET_AR_ADDRESS\",\n  CLEAR_AR_ADDRESS = \"CLEAR_AR_ADDRESS\",\n  SET_AR_SECRET_KEY = 'SET_AR_SECRET_KEY',\n  CLEAR_AR_SECRET_KEY = \"CLEAR_AR_SECRET_KEY\",\n  SET_ZIL_SECRET_KEY = 'SET_ZIL_SECRET_KEY',\n  CLEAR_ZIL_SECRET_KEY = \"CLEAR_ZIL_SECRET_KEY\"\n}\n\nexport type TUserAction =\n  | {\n      type: ACTION_TYPES.SET_AR_ADDRESS;\n      payload: string;\n    }\n  | {\n      type: ACTION_TYPES.CLEAR_AR_ADDRESS;\n    }\n  | {\n    type: ACTION_TYPES.SET_AR_SECRET_KEY;\n    payload: string;\n  }\n  | {\n    type: ACTION_TYPES.CLEAR_AR_SECRET_KEY;\n  }\n  | {\n    type: ACTION_TYPES.SET_ZIL_SECRET_KEY;\n    payload: string;\n  }\n  | {\n    type: ACTION_TYPES.CLEAR_ZIL_SECRET_KEY;\n  };\n\nexport interface IActionsCreator {\n  setArAddress(address: string): TUserAction;\n  clearArAddress(): TUserAction;\n  setArSecretKey(key: string): TUserAction;\n  clearArSecretKey(): TUserAction;\n  setZilSecretKey(key: string): TUserAction;\n  clearZilSecretKey(): TUserAction;\n}\n\nexport type TUserState = Readonly<{\n  address: TNullable<string>;\n  arweaveSecretKey: TNullable<string>;\n  zilliqaSecretKey: TNullable<string>;\n}>;\n","import { TUserState, TUserAction, ACTION_TYPES } from './types';\n\nexport const userState: TUserState = {\n  address: null,\n  arweaveSecretKey: null,\n  zilliqaSecretKey: null\n};\n\nexport const userReducer = (state: TUserState, action: TUserAction) => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_AR_ADDRESS:\n      return { ...state, address: action.payload };\n    case ACTION_TYPES.CLEAR_AR_ADDRESS:\n      return { ...state, address: null }\n    default:\n      return state;\n  }\n};\n","enum Routes {\n  Home = '/',\n  Domains = '/domains',\n  Contact = '/contact'\n}\n\nexport default Routes;\n","import { userState, userReducer } from './user';\nimport { TUserState, TUserAction } from './user/types';\n\nimport { contextFactory } from \"../utils/context\";\n\nexport type TGlobalState = Readonly<{\n  user: TUserState;\n}>;\n\nexport const globalState: TGlobalState = {\n  user: userState\n};\n\nexport const { useDispatch, useSelector, stateContext, dispatchContext } =\n  contextFactory(globalState);\n\nexport const globalReducer = (state: TGlobalState, action: unknown): TGlobalState => ({\n  user: userReducer(state.user, action as TUserAction)\n});\n","import { createContext, Dispatch, useContext } from 'react';\n\nexport const contextFactory = <State, Action>(defaultState: State) => {\n  const defaultDispatcher: Dispatch<Action> = () => ({});\n\n  const stateContext = createContext<State>(defaultState);\n  const dispatchContext = createContext<Dispatch<any>>(defaultDispatcher);\n\n  const useDispatch = () => {\n    const dispatch = useContext(dispatchContext);\n    return dispatch;\n  };\n\n  const useSelector = <T>(selector: (state: State) => T) => {\n    const state = useContext(stateContext);\n    return selector(state);\n  };\n\n  return { useDispatch, useSelector, stateContext, dispatchContext };\n};\n","import React from \"react\";\n\nimport { SearchBar }  from '../index';\n\nfunction Header() {\n  return (\n    <div id=\"header\">\n      <div className=\"content\">\n        <div className=\"inner\">\n          <SearchBar />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <footer id=\"footer\">\n      <ul className=\"icons\" style={{ marginTop: \"0.5%\" }}>\n        <li>\n          <a\n            href=\"https://github.com/Zillacracy-org/ssibrowser.com\"\n            className=\"icon brands fa-github\"\n          >\n            <span className=\"label\">GitHub</span>\n          </a>\n        </li>\n      </ul>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport styles from './styles.module.scss';\n\nfunction Home() {\n  return (\n    <div id=\"header\" className={styles.container}>\n      <nav className={styles.nav}>\n        <ul>\n          <li>\n            <Link to=\"/domains\">Domains</Link>\n          </li>\n          <li>\n            <Link to=\"/contact\">Join us</Link>\n          </li>\n        </ul>\n      </nav>\n    </div>\n  );\n}\n\nexport default Home;\n","import { Link } from \"react-router-dom\";\n\nfunction Domains() {\n  return (\n    <div id=\"main\">\n      <span\n        role=\"img\"\n        aria-label=\"back arrow\"\n        style={{ marginTop: \"7%\", marginBottom: \"2%\" }}\n      >\n        <Link to=\"/\">🔙</Link>\n      </span>\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }}>Domains</h2>\n      <section style={{ width: \"100%\" }}>\n        <p>\n          Search for a <i>username.domain</i> to access its public profile - or\n          if it's available, you can register it!\n        </p>\n        <div className=\"table-wrapper\">\n          <table>\n            <thead>\n              <tr>\n                <th>Domain</th>\n                <th>For</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>.did</td>\n                <td>Decentralized identifier smart contracts</td>\n              </tr>\n              <tr>\n                <td>.mapu</td>\n                <td>Self-sovereign decentralized communities</td>\n              </tr>\n              <tr>\n                <td>.tyron</td>\n                <td>Tyron smart contracts</td>\n              </tr>\n              <tr>\n                <td>.ssi</td>\n                <td>Self-sovereign digital identities</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default Domains;\n","import { Link } from \"react-router-dom\";\n\nfunction Contact() {\n  return (\n    <div id=\"main\">\n      <span\n        role=\"img\"\n        aria-label=\"back arrow\"\n        style={{ marginTop: \"7%\", marginBottom: \"2%\" }}\n      >\n        <Link to=\"/\">🔙</Link>\n      </span>\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }}>Join us</h2>\n      <section style={{ width: \"100%\", textAlign: \"center\" }}>\n        <ul style={{ listStyle: \"none\" }}>\n          <li>\n            <a href=\"https://ssiprotocol.com\">www.ssiprotocol.com</a>\n          </li>\n          <li>\n            <a href=\"https://zillacracy.com\">www.zillacracy.com</a>\n          </li>\n          <li>\n            <a\n              href=\"https://discord.gg/FMAUh4ZNwZ\"\n              className=\"icon brands fa-discord\"\n            >\n            <span className=\"label\">Discord</span>\n            </a> Join us at the <code><a href=\"https://discord.gg/FMAUh4ZNwZ\">tyron-ssi-protocol</a></code> channel in Zilgineers\n          </li>\n        </ul>\n      </section>\n    </div>\n  );\n}\n\nexport default Contact;\n","import React, { useState } from \"react\";\nimport Arweave from \"arweave\";\nimport * as SmartWeave from \"smartweave\";\nimport * as DKMS from \"../../lib/dkms\";\n\nexport interface IProfile {\n  username: string;\n  domain: string;\n}\n\nfunction PublicProfile({\n  username,\n  domain,\n}: IProfile) {\n  const [TransferAmount, setTransferAmount] = useState(\"\");\n  const handleTransferAmount = (event: React.ChangeEvent<HTMLInputElement>) => setTransferAmount(event.target.value);\n\n  const [message, setMessage] = useState(\"\");\n  const handleMessage = (event: React.ChangeEvent<HTMLTextAreaElement>) => setMessage(event.target.value);\n\n  return (\n    <div id=\"main\">\n      <h2 style={{ width: \"100%\", textAlign: \"center\" }}>\n        public profile of {username}.{domain}\n      </h2>\n      <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n        <h4 className=\"major\">Transfers</h4>\n        <form>\n          <div className=\"fields\">\n            <div className=\"field half\">\n              <input\n                type=\"text\"\n                placeholder=\"Amount\"\n                onChange={handleTransferAmount}\n              />\n            </div>\n            <div className=\"field half\">\n              <input\n                type=\"button\"\n                className=\"button primary\"\n                value=\"Transfer\"\n                onClick={async () => {\n                  /*\n                  try {\n                    if (keyfile === \"\" && arconnect === \"\") {\n                      throw new Error(\n                        `You have to connect with ArConnect or your keyfile.`\n                      );\n                    }\n                    if (\n                      window.confirm(\n                        `You are about to donate ${TransferAmount} $AR to '${username}.${domain}'. Click OK to proceed.`\n                      )\n                    ) {\n                      let tx;\n                      if (arconnect !== \"\") {\n                        tx = await arweave.createTransaction({\n                          target: account.ssi,\n                          quantity: arweave.ar.arToWinston(TransferAmount),\n                        });\n                        await arweave.transactions.sign(tx);\n                      } else {\n                        tx = await arweave.createTransaction(\n                          {\n                            target: account.ssi,\n                            quantity: arweave.ar.arToWinston(TransferAmount),\n                          },\n                          keyfile\n                        );\n                        await arweave.transactions.sign(tx, keyfile);\n                      }\n                      const result = await arweave.transactions.post(tx);\n                      alert(`Transaction: ${tx}. Status: ${result.status}`);\n                    }\n                  } catch (error) {\n                    alert(error);\n                  }\n                  */\n                }}\n              />\n            </div>\n          </div>\n        </form>\n      </section>\n      { /*account.wallet !== \"\" && */(\n        <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n          <h4 className=\"major\">SSI Communication</h4>\n          <p>Send them an encrypted message:</p>\n          <form method=\"post\" action=\"#\">\n            <div className=\"fields\">\n              <div className=\"field\">\n                <textarea onChange={handleMessage} rows={4}></textarea>\n              </div>\n            </div>\n            <ul className=\"actions\">\n              <li>\n                <input\n                  type=\"button\"\n                  className=\"button primary\"\n                  value=\"Encrypt & send\"\n                  onClick={async () => {\n                    try {\n                      /*\n                      if (keyfile === \"\" && arconnect === \"\") {\n                        throw new Error(\n                          `You have to connect with ArConnect or your keyfile.`\n                        );\n                      }\n\n                      const userPermawallet = await SmartWeave.readContract(\n                        arweave,\n                        account.wallet\n                      );\n                      const userSsiComm = userPermawallet.ssiComm;\n                      const encryptedMessage = await DKMS.encryptData(\n                        message,\n                        userSsiComm\n                      );\n\n                      if (\n                        window.confirm(\n                          `You are about to send a message to ${username}.${domain}'. Click OK to proceed.`\n                        )\n                      ) {\n                        let tx;\n                        if (arconnect !== \"\") {\n                          tx = await arweave.createTransaction({\n                            target: account.ssi,\n                            data: Arweave.utils.concatBuffers([\n                              encryptedMessage,\n                            ]),\n                            quantity: arweave.ar.arToWinston(\"0\"),\n                          });\n                          await arweave.transactions.sign(tx);\n                        } else {\n                          tx = await arweave.createTransaction(\n                            {\n                              target: account.ssi,\n                              data: Arweave.utils.concatBuffers([\n                                encryptedMessage,\n                              ]),\n                              quantity: arweave.ar.arToWinston(\"0\"),\n                            },\n                            keyfile\n                          );\n                          await arweave.transactions.sign(tx, keyfile);\n                        }\n                        const result = await arweave.transactions.post(tx);\n                        alert(\n                          `Transaction: ${JSON.stringify(tx)}. Status: ${\n                            result.status\n                          }`\n                        );\n                      }\n                      */\n                    } catch (error) {\n                      alert(error);\n                    }\n                  }}\n                />\n              </li>\n              <li>\n                <input type=\"reset\" value=\"Reset\" />\n              </li>\n            </ul>\n          </form>\n        </section>\n      )}\n    </div>\n  );\n}\n\nexport default PublicProfile;\n","export enum PERMISSIONS_TYPES {\n  ACCESS_ADDRESS = 'ACCESS_ADDRESS',\n  SIGN_TRANSACTION = 'SING_TRANSACTION',\n  ENCRYPT = 'ENCRYPT',\n  DECRYPT = 'DECRYPT'\n}\n\nexport const PERMISSIONS: Array<PERMISSIONS_TYPES> = [\n  PERMISSIONS_TYPES.ACCESS_ADDRESS,\n  PERMISSIONS_TYPES.SIGN_TRANSACTION,\n  PERMISSIONS_TYPES.ENCRYPT,\n  PERMISSIONS_TYPES.DECRYPT\n];\n","import Arweave from \"arweave\";\n\nconst arweave = Arweave.init({\n  host: \"arweave.net\",\n  port: 443,\n  protocol: \"https\",\n});\n\nexport default arweave;\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID } from \".\";\nimport * as DKMS from '../lib/dkms';\nimport * as SmartWeave from \"smartweave\";\n\nfunction PrivateProfile({ username, domain, account, pscMember, arweave, arconnect, keyfile }) {\n    const[update, setUpdate] = useState('');\n    const handleUpdate = event => {\n        setUpdate(event.target.value);\n    };\n\n    const[newAddress, setNewAddress] = useState('');\n    const handleNewAddress = event => {\n        setNewAddress(event.target.value);\n    };\n\n    const[keyId, setKeyId] = useState('');\n    const handleKeyId = event => {\n        setKeyId(event.target.value);\n    };\n\n    const[specificId, setSpecificId] = useState('');\n    const handleSpecificId = event => {\n        setSpecificId(event.target.value);\n    };\n\n    const emptyMessage = {\n        firstName: \"\",\n        lastName: \"\",\n        streetName: \"\",\n        buildingNumber: \"\",\n        country: \"\"\n    };\n    const[ivms101, setIvms101] = useState(emptyMessage);\n    const[firstName, setFirstName] = useState('');\n    const[lastName, setLastName] = useState('');\n    const[streetName, setStreetName] = useState('');\n    const[buildingNumber, setBuildingNumber] = useState('');\n    const[country, setCountry] = useState('');\n    const handleFirstName = event => {\n        setFirstName(event.target.value);\n    };\n    const handleLastName = event => {\n        setLastName(event.target.value);\n    };\n    const handleStreetName = event => {\n        setStreetName(event.target.value);\n    };\n    const handleBuildingNumber = event => {\n        setBuildingNumber(event.target.value);\n    };\n    const handleCountry = event => {\n        setCountry(event.target.value);\n    };\n\n    const[updateAddressLegend, setUpdateAddressLegend] = useState('update');\n    const[updateAddressButton, setUpdateAddressButton] = useState('button primary');\n    const[sendKey, setSendKey] = useState('encrypt & send to permawallet');\n    const[newKeyButton, setNewKeyButton] = useState('button primary');\n    const[savePassportLegend, setSavePassportLegend] = useState('save');\n    const[savePassportButton, setSavePassportButton] = useState('button primary');\n    const[updatePassportLegend, setUpdatePassportLegend] = useState('update');\n    const[updatePassportButton, setUpdatePassportButton] = useState('button primary');\n    \n    return(\n\t\t<div id=\"main\">\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">{ username }.{ domain } settings</h2>\n            <p style={{ width: \"100%\" }}>Hi { username }.{ domain }, welcome back!</p>\n            <section style={{ width: \"100%\", marginTop:\"4%\" }}>\n                <h4 class=\"major\">Update an address</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleUpdate }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiAyja\">SSI address in AYJA</option>\n                                <option value=\"permawallet\">Permawallet address</option>\n                                <option value=\"ssiPermawallet\">SSI address in permawallet</option>\n                            </select>\n                        </div>\n                        \n                        { update !== \"\" && <div class=\"field half\"><input type=\"text\" placeholder=\"New address\" onChange={ handleNewAddress } /></div> }\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ updateAddressButton } value={ updateAddressLegend }\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    let input;\n                                    let contractId;\n                                    switch (update) {\n                                        case 'ssiAyja':\n                                            input = {\n                                                function: 'updateSsi',\n                                                username: username,\n                                                ssi: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;\n                                            break;\n                                        case 'permawallet':\n                                            input = {\n                                                function: 'updateWallet',\n                                                username: username,\n                                                owallet: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;  \n                                            break;\n                                        case 'ssiPermawallet':\n                                            input = {\n                                                function: 'ssi',\n                                                ssi: newAddress\n                                            };\n                                            contractId = account.wallet;\n                                            break;                                        \n                                        default:\n                                            throw new Error('Wrong selection.');\n                                    }\n                                    \n                                    const fee = arweave.ar.arToWinston('0.1');\n                                    \n                                    let tx;\n                                    if( arconnect !== '' ){\n                                        if( window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', contractId.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n    \n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });\n                                            tx = tx.id;                                  \n                                        }\n                                    } else{\n                                        if(window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input).catch( err => { throw err });\n                                            } else{\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input, [], pscMember, fee).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    if( tx === undefined ){\n                                        alert(`Transaction rejected.`)\n                                    } else{\n                                        alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                        setUpdateAddressLegend('updated');\n                                        setUpdateAddressButton('button');\n                                    }                             \n                                } catch (error) {\n                                    alert(error)\n                                }\n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setUpdate(\"\"); setUpdateAddressLegend('update'); setUpdateAddressButton('button primary') }} /></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n                <h4 class=\"major\">Generate a new key</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleKeyId }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiComm\">SSI Communication Key</option>\n                                <option value=\"byId\">Key by ID</option>\n                            </select>\n                        </div>\n                        \n                        { keyId === \"byId\" && <div class=\"field half\"><input type=\"text\" placeholder=\"Key ID\" onChange={ handleSpecificId } /></div> }\n                    </div>    \n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ newKeyButton } value={ sendKey }\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    if( !account.wallet || account.wallet === \"\") {\n                                        throw new Error(`It seems like you don't have any SSI Permawallet registered.`);\n                                    }\n\n                                    let tx;\n                                    if( arconnect !== '' ){ \n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptKey(arconnect, ssiCommKeys.privateKey);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssicomm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptKey(arconnect, keys.privateKey);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if(window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', ayjaPstStateID.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n\n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });\n                                            tx = tx.id;                                   \n                                        }\n                                    } else{\n                                        const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptData(ssiCommKeys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssicomm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptData(keys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if( window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                tx = await SmartWeave.interactWrite(\n                                                    arweave,\n                                                    keyfile,\n                                                    account.wallet.toString(),\n                                                    input        \n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await SmartWeave.interactWrite(\n                                                    arweave,\n                                                    keyfile,\n                                                    account.wallet.toString(),\n                                                    input,\n                                                    [],\n                                                    pscMember.toString(),\n                                                    fee.toString()\n                                                ).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    if( tx === undefined ){\n                                        alert(`Transaction still processing.`)\n                                    } else{\n                                        alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                        setSendKey('sent');\n                                        setNewKeyButton('button');\n                                    }\n                                } catch (error) {\n                                    alert(error)\n                                }                            \n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setKeyId(\"\"); setSendKey('send'); setNewKeyButton('button primary') }}/></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n                <h4 class=\"major\">Update your SSI Travel Rule Passport</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <label>First name</label>\n                            <input type=\"text\" onChange={ handleFirstName } />\n                        </div>\n                        <div class=\"field half\">\n                            <label>Last name</label>\n                            <input type=\"text\" onChange={ handleLastName } />\n                        </div>\n                    </div>\n                    <section style={{width:'100%', marginBottom:\"3%\"}}>\n                        <h4>Residential address</h4>\n                        <div class=\"fields\">\n                            <input type=\"text\" placeholder=\"Street name\" onChange={ handleStreetName } />\n                        </div>\n                    </section>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <input type=\"text\" placeholder=\"Building number\" onChange={ handleBuildingNumber } />\n                        </div>\n                        <div class=\"field half\">\n                            <select onChange={ handleCountry }>\n                                <option value=\"\">Select country of residence</option>\n                                <option value=\"Argentina\">Argentina</option>\n                                <option value=\"Denmark\">Denmark</option>\n                                <option value=\"Singapore\">Singapore</option>\n                                <option value=\"United Kingdom\">United Kingdom</option>\n                            </select>\n                        </div>\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ savePassportButton } value={ savePassportLegend }\n                                onClick={ () => {\n                                    setIvms101({\n                                        firstName: firstName,\n                                        lastName: lastName,\n                                        streetName: streetName,\n                                        buildingNumber: buildingNumber,\n                                        country: country\n                                    });\n                                    setSavePassportLegend('Saved');\n                                    setSavePassportButton('button');\n                                }}\n                                />\n                        </li>\n                        <li><input type=\"button\" class={ updatePassportButton } value={ updatePassportLegend }\n                                onClick={ async() => {\n                                    try {\n                                        if( keyfile === '' &&  arconnect === '' ){\n                                            throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                        }\n                                        if( savePassportLegend === 'save' ){\n                                            throw new Error('You have to fill up and save the SSI Travel Rule Passport information first.')\n                                        }\n\n                                        // Travel Rule Passport\n                                        const trSsiKeys = await DKMS.generateSsiKeys(arweave);\n                                        const encryptedTrPassport = await DKMS.encryptData(ivms101, trSsiKeys.publicEncryption);\n                                        alert(`This is your encrypted SSI Travel Rule Passport: ${ encryptedTrPassport }`);\n\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        let ssiTravelRulePrivate;\n                                        let input;\n                                        let tx;\n                                        if( arconnect !== '' ){\n                                            if( window.confirm(\"The fee to update your SSI Travel Rule Passport is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                ssiTravelRulePrivate = await DKMS.encryptKey(arconnect, trSsiKeys.privateKey);\n                                                input = {\n                                                    function: 'trp',\n                                                    trmessage: encryptedTrPassport,\n                                                    trkey: ssiTravelRulePrivate\n                                                };\n                                                \n                                                if( pscMember === account.ssi ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                    tx = await arweave.createTransaction(\n                                                        { \n                                                            data: Math.random().toString().slice(-4) \n                                                        }\n                                                    ).catch( err => { throw err });\n                                                } else{\n                                                    tx = await arweave.createTransaction(\n                                                        {\n                                                            data: Math.random().toString().slice(-4),\n                                                            target: pscMember.toString(),\n                                                            quantity: fee.toString(),\n                                                        }\n                                                    ).catch( err => { throw err });\n                                                }\n                                                tx.addTag('Dapp', 'tyron');\n                                                tx.addTag('App-Name', 'SmartWeaveAction');\n                                                tx.addTag('App-Version', '0.3.0');\n                                                tx.addTag('Contract', account.wallet.toString());\n                                                tx.addTag('Input', JSON.stringify(input));\n        \n                                                await arweave.transactions.sign(tx).catch( err => { throw err });\n                                                await arweave.transactions.post(tx).catch( err => { throw err });\n                                                tx = tx.id;                                  \n                                            }\n                                        } else{\n                                            if(window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                                ssiTravelRulePrivate = await DKMS.encryptData(trSsiKeys.privateKey, publicEncryption);\n                                                input = {\n                                                    function: 'trp',\n                                                    trmessage: encryptedTrPassport,\n                                                    trkey: ssiTravelRulePrivate\n                                                };\n\n                                                if( pscMember === account.ssi ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                    tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet.toString(), input).catch( err => { throw err });\n                                                } else{\n                                                    tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet.toString(), input, [], pscMember, fee).catch( err => { throw err });\n                                                }                                       \n                                            }\n                                        }\n                                        if( tx === undefined ){\n                                            alert(`Transaction rejected.`)\n                                        } else{\n                                            alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                            setUpdatePassportLegend('updated');\n                                            setUpdatePassportButton('button');\n                                        }                            \n                                    } catch (error) {\n                                        alert(error)\n                                    }\n                                }}\n                            /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setIvms101(emptyMessage); setSavePassportLegend('save'); setSavePassportButton('button primary'); setUpdatePassportLegend('update'); setUpdatePassportButton('button primary') }}/></li>  \n                    </ul>\n                </form>\n            </section>\n        </div>\n\t);\n}\n\nexport default PrivateProfile;\n","const BASE_URL = \"https://github.com/pungtas/smart-contracts.tyron/blob/main\";\n\nexport enum SMART_CONTRACTS {\n  INIT = \"init\",\n  DID = \"did\",\n  xWALLET = \"xwallet\",\n  SSI = \"ssi\",\n  PST = \"pst\",\n  PSTi = \"psti\",\n  xPSTi = \"xpsti\",\n  pWALLET = \"pwallet\",\n}\n\nexport const VALID_SMART_CONTRACTS: string[] = [\n  SMART_CONTRACTS.INIT,\n  SMART_CONTRACTS.DID,\n  SMART_CONTRACTS.xWALLET,\n  SMART_CONTRACTS.SSI,\n  SMART_CONTRACTS.PST,\n  SMART_CONTRACTS.PSTi,\n  SMART_CONTRACTS.xPSTi,\n  SMART_CONTRACTS.pWALLET\n];\n\n// @TODO: Add missing urls from this list.\nexport const SMART_CONTRACTS_URLS: { [key in SMART_CONTRACTS]: string } = {\n  [SMART_CONTRACTS.DID]: `${BASE_URL}/DID/did.tyron.scilla`,\n  [SMART_CONTRACTS.xWALLET]: `${BASE_URL}/DID/DIDdapps/DIDxWallet.tyron.scilla`,\n  [SMART_CONTRACTS.INIT]: `${BASE_URL}/INIT/init.tyron.scilla`,\n  [SMART_CONTRACTS.PST]: `${BASE_URL}/PST/pst.tyron.scilla`,\n  [SMART_CONTRACTS.PSTi]: `${BASE_URL}/PST/new-token/PSTi.tyron.scilla`,\n  [SMART_CONTRACTS.xPSTi]: `${BASE_URL}/PST/wrapped-token/xPSTi.tyron.scilla`,\n  [SMART_CONTRACTS.pWALLET]: `${BASE_URL}/PERMAWALLET/pWallet.tyron.js`,\n  [SMART_CONTRACTS.SSI]: `${BASE_URL}/SSI/ssi.tyron.scilla`\n};\n","export enum DOMAINS {\n  TYRON = 'tyron',\n  SSI = 'ssi',\n  DID = 'did',\n  MAPU = 'mapu',\n  COOP = 'coop'\n}\n","import React, { useState } from \"react\";\n\nimport {\n  SMART_CONTRACTS_URLS,\n  VALID_SMART_CONTRACTS,\n} from \"../../constants/tyron\";\nimport { DOMAINS } from \"../../constants/domains\";\n\nimport styles from \"./styles.module.scss\";\n\nfunction SearchBar() {\n  const [value, setValue] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [domain, setDomain] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  const handleOnKeyPress = ({ key }: React.KeyboardEvent<HTMLInputElement>) => {\n    if (key === \"Enter\") {\n      // @TODO: Handle other domains\n      switch (domain) {\n        case DOMAINS.TYRON:\n          if (VALID_SMART_CONTRACTS.includes(name))\n            window.open(\n              SMART_CONTRACTS_URLS[\n                name as unknown as keyof typeof SMART_CONTRACTS_URLS\n              ]\n            );\n          else setError(\"Invalid smart contract\");\n          break;\n        case DOMAINS.SSI:\n          console.log(\"\");\n          break;\n        default:\n          setError(\"Domain not valid\");\n      }\n    }\n  };\n\n  const handleSearchBar = ({\n    currentTarget: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(value);\n    if (value) {\n      const [name = \"\", domain = \"\"] = value.split(\".\");\n      setName(name);\n      setDomain(domain);\n    } else {\n      setError(\"\");\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <input\n        type=\"text\"\n        className={styles.searchBar}\n        onKeyPress={handleOnKeyPress}\n        onChange={handleSearchBar}\n        value={value}\n      />\n      <p className={styles.errorMsg}>{error}</p>\n    </div>\n  );\n}\n\nexport default SearchBar;\n","import { useReducer } from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Route,\n  Switch,\n} from \"react-router-dom\";\n\nimport {\n  stateContext as StateContext,\n  dispatchContext as DispatchContext,\n  globalReducer,\n  globalState,\n} from \"./context/index\";\nimport Routes from \"./constants/routes\";\nimport { Header, Footer, Home, Domains, Contact } from \"./components\";\nimport \"./styles/css/main.css\";\n\nfunction App() {\n  const [state, dispatch] = useReducer(globalReducer, globalState);\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <div id=\"wrapper\">\n          <Router>\n            <Header />\n            <Switch>\n              <Route exact path={Routes.Home} component={Home} />\n              <Route exact path={Routes.Domains} component={Domains} />\n              <Route exact path={Routes.Contact} component={Contact} />\n              <Redirect to={Routes.Home} />\n            </Switch>\n            <Footer />\n          </Router>\n        </div>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/main.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchBar\":\"styles_searchBar__2_OfB\",\"errorMsg\":\"styles_errorMsg__1Woia\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__3NFhU\",\"nav\":\"styles_nav__BMrUO\"};"],"sourceRoot":""}