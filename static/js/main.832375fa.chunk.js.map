{"version":3,"sources":["images/tyron_logo.png","components/header.js","components/footer.js","components/home.js","images/steffen.JPEG","components/about.js","components/did.js","images/incendios_chubut.jpg","components/mapu.js","components/token.js","components/defi.js","components/permawallet.js","lib/select-weighted-ayja-holder.js","components/browser.js","components/contact.js","lib/crypto-util.js","lib/dkms.js","components/profile.js","components/connectWallet.js","components/createAccount.js","components/settings.js","components/index.js","App.js","reportWebVitals.js","index.js"],"names":["Header","id","src","logo","width","alt","class","Footer","href","style","marginTop","withRouter","to","role","aria-label","marginBottom","textAlign","steffen","incendios_chubut","chartType","loader","data","options","is3D","backgroundColor","chartArea","height","left","right","fontName","colors","legend","position","textStyle","color","fontSize","bold","tooltip","text","pieSliceTextStyle","rootProps","selectWeightedAyjaHolder","accounts","a","totalTokens","Object","keys","username","balance","weighted","addr","ssi","sum","r","Math","random","address","Error","useState","setUsername","domain","setDomain","account","setAccount","pscMember","setPscMember","taken","setTaken","handleReset","onChange","onSubmit","e","preventDefault","type","event","input","target","value","test","length","for","onClick","arweave","Arweave","init","host","port","protocol","SmartWeave","ayjaPstStateID","catch","err","ayjaState","_err","undefined","alert","listStyle","generateRandomBytes","array","Uint8Array","window","crypto","getRandomValues","generatePublicEncryption","privKey","privateKey","create","algo","name","hash","keyData","kty","n","alg","ext","subtle","importKey","publicKey","keyBuf","encrypt","encryptedPublicKey","publicEncryption","utils","concatBuffers","bufferTob64Url","generateSsiKeys","wallets","generate","encryptKey","arConnect","key","JSON","stringify","algorithm","encryptedKey","encryptData","publicEnc","b64UrlToBuffer","encKey","slice","contentBuf","TextEncoder","encode","encryptedContent","encryptedData","Profile","arconnect","keyfile","donationAmount","setDonationAmount","message","setMessage","placeholder","confirm","createTransaction","quantity","ar","arToWinston","tx","transactions","sign","post","result","status","wallet","method","action","rows","userPermawallet","userSsiComm","ssiComm","DKMS","encryptedMessage","setValue","save","setSave","setAddr","setArconnect","setKeyfile","button","setButton","useArConnect","useEffect","getPermissions","includes","getActiveAddress","addEventListener","detail","fileInput","React","createRef","disconnect","permissions","open","connect","ref","this_keyfile","current","files","fr","FileReader","onload","file","parse","readAsText","jwkToAddress","CreateAccount","emptyMessage","firstName","lastName","streetName","buildingNumber","country","ivms101","setIvms101","setFirstName","setLastName","setStreetName","setBuildingNumber","setCountry","passportButton","setPassportButton","savePassport","setSavePassport","registerButton","setRegisterButton","register","setRegister","_event","ssiCommKeys","trSsiKeys","encryptedTrPassport","ssiCommPrivate","ssiTravelRulePrivate","permawalletTemplateID","toString","permawalletInitState","trp","fee","addTag","permawalletSourceID","dnsInput","function","dnsssi","dnswallet","dnsTx","Settings","update","setUpdate","newAddress","setNewAddress","keyId","setKeyId","specificId","setSpecificId","updateAddressLegend","setUpdateAddressLegend","updateAddressButton","setUpdateAddressButton","sendKey","setSendKey","newKeyButton","setNewKeyButton","savePassportLegend","setSavePassportLegend","savePassportButton","setSavePassportButton","updatePassportLegend","setUpdatePassportLegend","updatePassportButton","setUpdatePassportButton","contractId","owallet","ssicomm","trmessage","trkey","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.832375fa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/tyron_logo.aa90c4ca.png\";","import React from \"react\";\nimport logo from '../images/tyron_logo.png';\n\nfunction Header() {\n    return(\n        <div id=\"header\">\n            <img src={logo} width=\"20%\" alt=\"tyron_logo\"/>\n            <div class=\"content\">\n                <div class=\"inner\">\n                    <h1>tyron self-sovereign identity protocol</h1>\n                    <p>own your data, empower your world</p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Footer() {\n    return(\n        <footer id=\"footer\">\n            <p class=\"copyright\">&copy;Tyron Pungtas. Design: <a href=\"https://html5up.net\">HTML5 UP</a>.</p>\n            <ul class=\"icons\" style={{ marginTop: '0.5%'}}>\n                <li><a href=\"https://twitter.com/ssiprotocol\" class=\"icon brands fa-twitter\"><span class=\"label\">Twitter</span></a></li>\n                <li><a href=\"https://github.com/pungtas\" class=\"icon brands fa-github\"><span class=\"label\">GitHub</span></a></li>\n                <li><a href=\"https://discord.gg/FMAUh4ZNwZ\" class=\"icon brands fa-discord\"><span class=\"label\">Discord</span></a></li>\n            </ul>\n\t\t</footer>\n    );\n}\n\nexport default Footer;\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div id=\"header\" style={{ marginTop: '1%' }}>\n            <nav style={{ width:\"100%\"}}>\n                <ul>\n                    <li><Link to=\"/about\">About</Link></li>\n                    <li><Link to=\"/did\">DID</Link></li>\n                    <li><Link to=\"/mapu\">.Mapu</Link></li>\n                    <li><Link to=\"/token\">Token</Link></li>\n                    <li><Link to=\"/defi\">DeFi</Link></li>\n                    <li><Link to=\"/permawallet\">Wallet</Link></li>\n                    <li><Link to=\"/browser\">Browser</Link></li>\n                    <li><Link to=\"/contact\">Contact</Link></li>\n                </ul>\n            </nav>\n        </div>\n    );\n}\n\nexport default withRouter(Home);\n","export default __webpack_public_path__ + \"static/media/steffen.81563399.JPEG\";","import React from \"react\";\nimport steffen from '../images/steffen.JPEG';\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction About() {\n\treturn(\n\t\t<div id=\"main\">\n\t\t\t<span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n\t\t\t<h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">About</h2>\n\t\t\t<span class=\"image main\"><img src={steffen} alt=\"\" /></span>\n\t\t\t<section style={{ width:'100%' }}>\n\t\t\t\t<p>The word <i>tyron</i> derives from the Greek <i>turannos</i> that means sovereign, and the purpose of the Tyron Self-Sovereign Identity Protocol is to give people sovereignty over their data. Sovereignty to empower our world by protecting nature and helping each other in times of need, selflessly.</p>\n\t\t\t\t<h3 class=\"major\">Self-sovereign identity (SSI)</h3>\n\t\t\t\t<p>Self-sovereign identity enables people to manage their digital, online identities - proving who they are without a middleman, by anchoring <Link to=\"/did\">decentralized identifiers</Link> on blockchain networks as a shared root of trust.</p>\n\t\t\t\t<p>Tyron self-sovereign identities will be able to share uncensorable information such as articles and encrypted messages, as well as make donations to aid natural and human-made disasters that endanger our planet's ecosystems.</p>\n\t\t\t</section>\n\t\t</div>\n\t);\n}\n\nexport default withRouter(About);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Did() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">Decentralized Identifiers</h2>\n            <p>The W3C Decentralized Identifier Working Group has developed the <a href=\"https://w3c.github.io/did-core/\">Decentralized Identifiers (DIDs) specification</a> that defines a DID as a unique identifier that enables verifiable, decentralized digital identity. The Tyron SSI Protocol is conformant with this specification by implementing the <a href=\"https://www.tyronzil.com/\">tyronzil DID Method</a> - listed in the <a href=\"https://w3c.github.io/did-spec-registries/\">W3C DID Specification Registries</a>.</p>\n            <p>A digital identity's decentralized identifier rely on public attributes described in its DID Document. Such attributes are service endpoints and verification methods.</p>\n            <section>\n            <h3 class=\"major\">Service endpoints</h3>\n                <p>Network addresses, such as an HTTP URL or blockchain address, at which services operate on behalf of the digital identity. Services can refer to privacy-preserving communication (DID Comm) and social networking apps, among others.</p>\n                <h3 class=\"major\">Verification methods</h3>\n                <p>Cryptographic key pairs allow the user to authenticate themselves or authorize transactions through digital signatures. Verification methods correspond to verification relationships such as:</p>\n                <ul>\n                <li><b>Authentication:</b> To, e.g., sign in to a service or website.</li>\n                <li><b>Assertion:</b> To sign claims in verifiable credentials.</li>\n                <li><b>Key agreement:</b> A public key of yours that people can use to encrypt confidential information into a message that only you can decrypt with your corresponding private key.</li>\n                <li><b>Capability invocation:</b> A key that invokes a cryptographic capability to, e.g., authorize the update of your DID Document.</li>\n                <li><b>Capability delegation:</b> To delegate a cryptographic capability to another party.</li>\n            </ul>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Did);\n","export default __webpack_public_path__ + \"static/media/incendios_chubut.a352c373.jpg\";","import React from \"react\";\nimport incendios_chubut from \"../images/incendios_chubut.jpg\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Mapu() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">.Mapu</h2>\n            <section style={{ width:'100%' }}>\n                <p>A lot of people care about our natural environment. However, information is scattered, like-minded communities disconnected from each other, and many of us don't know where to start. Global warming is a real threat, but humans make it worse by continuing the unsustainable exploitation of natural resources. The Tyron SSI Protocol is thriving towards connecting like-minded people that want to protect nature and its ecosystems.</p>\n                <p><i>.Mapu</i> will be the domain name for communities that organize campaigns to aid natural and human-made disasters - so that people can send donations peer-to-peer and self-organize.</p>\n                <p>Thousands of hectares got <a href=\"https://www.opendemocracy.net/en/democraciaabierta/patagonia-argentina-mining-indigenous-politics-fire/\">intentionally burnt in Patagonia in March 2021</a>, including national parks:</p>\n                <span class=\"image main\"><img src={incendios_chubut} alt=\"\"/></span>\n                <p>Similar fires happened in Australia and the Amazon, killing everything in their paths. In the last year:</p>\n                <ul>\n                    <li>More than 6,000,000 hectares burnt in Australia.</li>\n                    <li>NASA satellites detected about 1.4 million anomalies in the southern Amazon, compared to 1.1 million in 2019. In the Pantanal along the border of Brazil, Paraguay, and Bolivia fires destroyed 4.4 million in 2020, about 28% of the Pantanal.</li>\n                    <li>In Chubut province, Argentina, fires burnt more than 500 houses along seven towns - including areas in national parks.</li>\n                </ul>\n                <p>Many of us may come from different places, but we share moral values. Blockchain technologies can help us distribute information that cannot get censored and donate crypto assets peer-to-peer - we can protect nature and future generations.</p>\n                <p>Change is coming, and we see it reflected in newer generations. Likewise, indigenous people have a culture with more connection and respect with nature. <i>Mapu</i> means earth in Mapuzungun.</p>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Mapu);\n","import React from \"react\";\nimport Chart from \"react-google-charts\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Token() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">$AYJA Profit Sharing Token</h2>\n            <section style={{ width: \"100%\" }}>\n                <p>The Tyron SSI Protocol will grow to be governed by the AYJA Profit-Sharing Community with $AYJA as its profit-sharing token. Accordingly, $AYJA holders dubbed SSI Agents will:</p>\n                <ul>\n                    <li>Receive their proportional amount of profits from fees collected by the protocol</li>\n                    <li>Vote and constitute the SSI Governance</li>\n                    <li>Access exclusive products and services such as DAOs and the possibility to operate <Link to=\"/defi\">SSI gas stations</Link></li>\n                </ul>\n                <div class=\"table-wrapper\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>Value</th>\n                                <th>Description</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Ticker</td>\n                                <td>AYJA</td>\n                                <td>The unique symbol assigned to the $AYJA profit-sharing token.</td>\n                            </tr>\n                            <tr>\n                                <td>Max supply</td>\n                                <td>10,000,000</td>\n                                <td>The total amount of tokens that will get minted.</td>\n                            </tr>\n                            <tr>\n                                <td>Smallest unit</td>\n                                <td>EPU</td>\n                                <td>One $AYJA can get divided into 1,000,000,000 $EPU.</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </section>\n            <section style={{ width:'100%' }}> \n                <h3 class=\"major\">SSI Governance</h3>\n                <p>Decentralized governance with the following features:</p>\n                <ul>\n                    <li>A quorum of 67% of the voting power</li>\n                    <li>1 $AYJA = 1 vote</li>\n                    <li>Voting is mandatory or incurs a penalty</li>\n                </ul>\n                <p>To decide:</p>\n                <ul>\n                    <li>Pairs that liquidity mine <Link to=\"/defi\">$TYRON</Link> - e.g. AYJA/ZIL, TYRON/ZIL</li>\n                    <li>Mint rate of $TYRON from liquidity, developer and usage rewards</li>\n                    <li>Price for SSI products and services such as domain name purchase and DID CRUD operations</li>\n                    <li>The annual sustainable project where the profits of Tyron Pungtas CIC will get invested</li>\n                    <li>Lockup periods for $AYJA token sales</li>\n                </ul>\n            </section>\n            <section style={{ width:'100%' }}>        \n                <h3 class=\"major\">$AYJA token allocations</h3>\n                <p>Only 49% of the $AYJA profit-sharing tokens will be ever available for sale. The remaining 51% will get managed by Tyron Pungtas, an open organization to become a Community Interest Company - so that most of these profits get yearly invested in a global sustainable project voted by SSI Governance.</p>\n                <p>As a % of the max supply:</p>\n                <Chart\n                    chartType=\"PieChart\"\n                    loader={<div>Loading Chart</div>}\n                    data={[\n                        ['', ''],\n                        ['Community Interest Company (CIC)', 51],\n                        ['SSI Agents', 40],\n                        ['Founder', 9]\n                        \n                    ]}\n                    options={{\n                        is3D: true,\n                        backgroundColor: 'transparent',\n                        chartArea:{ width:'100%', height:'100%', left: 96, right: 96 },\n                        fontName: \"Source Sans Pro\",\n                        colors: [\"#32527b\", \"#aaa9ad\", \"#fecb00\"],\n                        legend: { position: 'left', textStyle: { color: 'white', fontSize: 16, bold: 'true' }},\n                        tooltip: { text: 'percentage', textStyle: { bold: 'true' }},\n                        pieSliceTextStyle: { color: 'black', bold: 'true' }\n                    }}\n                    rootProps={{ 'data-testid': '1' }}\n                />\n                <h3>Lock-up periods & distribution </h3>\n                <div class=\"table-wrapper\">\n                    <table class=\"alt\">\n                        <thead>\n                            <tr>\n                                <th></th>\n                                <th>Allocation ($AYJA)</th>\n                                <th>Lock-up period</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>Tyron Pungtas CIC</td>\n                                <td>5,100,000</td>\n                                <td>Permanent</td>\n                            </tr>\n                            <tr>\n                                <td>SSI Agents</td>\n                                <td>4,000,000</td>\n                                <td>Exponential decay</td>\n                            </tr>\n                            <tr>\n                                <td>Founder</td>\n                                <td>900,000</td>\n                                <td>Exponential decay</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n            </section>\n            <section style={{ width:'100%' }}>\n                <h3 class=\"major\">Travel Rule</h3>\n                <p>In compliance with the Financial Action Task Force (FATF) Travel Rule, the Tyron SSI Protocol grants every self-sovereign identity the possibility to have an SSI Travel Rule Passport that implements the <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">InterVASP Messaging Standard IVMS101</a> encrypted in their <Link to=\"/permawallet\">SSI Permawallet</Link>. To avoid illegal activities that harm society, such as terrorism financing and money laundering, developing into a web of trust.</p>\n                <p>Such a compliance mechanism makes $AYJA attractive to both retail and institutional investors. The private companies and non-profit organizations that integrate the Tyron Self-Sovereign Identity Protocol will comply with the FATF Travel Rule when requiring their customer base to enable their SSI Travel Rule Passport.</p>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Token);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction DeFi() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">Decentralized finance</h2>\n            <section style={{ width: \"100%\"}}>\n                <p>The $TYRON DeFi identity token will get minted by the protocol to reward:</p>\n                <ul>\n                    <li>Liquidity providers</li>\n                    <li>Developers</li>\n                    <li>Content creators</li>\n                </ul>\n                <p>There will not be a pre-allocation of $TYRON tokens.</p>\n            </section>\n            <section style={{ width: \"100%\"}}>\n                <h3 class=\"major\">SSI Bridge: $TYRON + Gas Stations</h3>\n                <p>SSI gas stations will exist for the self-sovereign identities to buy gas (e.g. AR) from them, provided by SSI Agents ($AYJA holders).</p>\n                <p>Gas stations will only accept $TYRON as means of payment. Fees will also get paid in $TYRON:</p>\n                <ul>\n                    <li>SSI Agents can charge a fee</li>\n                    <li>The protocol could charge a fee and burn it to reduce the circulating supply of $TYRON</li>\n                </ul>\n                <i>More detail coming soon. Feel free to ask on <Link to=\"/contact\">Discord</Link></i>\n            </section>\t\n        </div>\n\t);\n}\n\nexport default withRouter(DeFi);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Permawallet() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">SSI Permawallet</h2>\n                <p>The amount of keys that a decentralized identity requires as <Link to=\"/did\">verification methods</Link> is an issue. Most wallets in the market rely on third parties, so the secure management of private keys can be a problem for the user - even more when they have private keys for different blockchains. The Tyron SSI Protocol Dapp solves this issue by implementing its own <a href=\"https://www.youtube.com/watch?v=LOrXOxc2yp0\">Decentralized Key Management System</a> on-chain on the immutable permaweb and backing up the user's SSI private keys into their Self-Sovereign Identity Permawallet.</p>\n                <p>An SSI Permawallet is a smart contract owned by its user where all keys got encrypted by the user's SSI Permaweb Key (their Arweave main key). Whenever necessary, the user can read the data from their on-chain wallet, decrypt it and use it to make the signatures required by their self-sovereign identity.</p>\n                <p>With an SSI Permawallet, the user must only worry about one private key: their SSI Permaweb Key. This improved user experience also brings to the user peace of mind that all their other private keys and personal information are encrypted, safely stored and always available on their on-chain wallet that lives on the permaweb - a decentralized, immutable and uncensorable Web 3.0.</p>\n            <section>\n                <h3>SSI Travel Rule Passport for multi-chain KYC</h3>\n                <p>The SSI Permawallet also stores the user's SSI Travel Rule Passport: An <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">IVMS101 message</a> that makes this self-hosted wallet compliant with the FATF Travel Rule. This passport has the user's personal information encrypted by the user's SSI Travel Rule Key. When executing a virtual asset transfer, the user attaches a copy of this key encrypted by the beneficiary's SSI Communication Key - so that the beneficiary, and only the beneficiary, can read their SSI Travel Rule Passport.</p>\n            </section>    \n            <section>\n                <h3>The SSI Communication Key</h3>\n                <p>Self-sovereign identities can send messages to each other, encrypting them with the receiver's SSI Communication Key - so that only the receiver can read them. For example, when sending a transfer, the originator can attach their SSI Travel Rule Key encrypted by the beneficiary's SSI Communication Key so they can read the originator's Travel Rule Passport.</p>\n                <h3 class=\"major\">Create your SSI Permawallet</h3>\n                <p>At the moment, you can create a permawallet by registering a <i>.Mapu</i> community in the <Link to=\"/browser\">browser</Link>.</p>\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Permawallet);\n","export async function selectWeightedAyjaHolder(accounts) {\n    // Count the total tokens\n    let totalTokens = 0;\n    for (const username of Object.keys(accounts)) {\n      \ttotalTokens += accounts[username].balance;\n    }\n    // Create a copy of balances where the amount each holder owns is represented by a value 0-1\n    const weighted = {};\n    for (const username of Object.keys(accounts)) {\n\t\tconst addr = accounts[username].ssi;\n      \tweighted[addr] = accounts[username].balance / totalTokens;\n    }\n  \n    let sum = 0;\n    const r = Math.random();\n    for (const address of Object.keys(weighted)) {\n\t\tsum += weighted[address];\n\t\tif (r <= sum && weighted[address] > 0.0001) {\n\t\t\treturn address;\n\t\t}\n    }\n    throw new Error('Unable to select token holder.');\n}\n  ","import React, { useState } from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport Arweave from 'arweave';\nimport * as SmartWeave from 'smartweave';\nimport { ayjaPstStateID, ConnectWallet } from \".\";\nimport { selectWeightedAyjaHolder } from \"../lib/select-weighted-ayja-holder\";\n\nfunction Browser() {\n    const[username, setUsername] = useState('');\n    const[domain, setDomain] = useState('mapu');\n    const[account, setAccount] = useState({});\n    const[pscMember, setPscMember] = useState('');\n    const[taken, setTaken] = useState('no');\n\n    const handleUsername = event => {\n        event.preventDefault();\n        const input = event.target.value;\n        const regex = /^[\\w\\d_]+$/;\n        if( !regex.test(input) || input.length < 5 || input.length > 15 ){\n        } else{\n            setUsername(input);\n        }\n    };\n    const handleDomain = event => {\n        setDomain(event.target.value);\n    };\n    const handleReset = () => {\n        setAccount({});\n        setPscMember('');\n        setAccount({});\n        setTaken('no');\n    };\n\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">Browser</h2>\n            <section style={{width:'100%'}}>\n                <p>Search for a <i>username.domain</i> to access its public profile - or if it's available, you can register it!</p>\n                <div class=\"table-wrapper\">\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>Domain</th>\n                                <th>For</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            <tr>\n                                <td>.mapu</td>\n                                <td><Link to=\"/mapu\"><i>.Mapu</i></Link> communities</td>\n                            </tr>\n                            <tr>\n                                <td>.did</td>\n                                <td>Users (coming soon)</td>\n                            </tr>\n                            <tr>\n                                <td>.agent</td>\n                                <td>SSI Agents (coming soon)</td>\n                            </tr>\n                            <tr>\n                                <td>.tyron</td>\n                                <td>Tyron smart contracts (coming soon)</td>\n                            </tr>\n                        </tbody>\n                    </table>\n                </div>\n                <form onChange={ handleReset } onSubmit= { e => e.preventDefault() }>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <label>Username</label>\n                            <input type=\"text\" onChange={ handleUsername } />\n                        </div>\n                        <div class=\"field half\">\n                            <label for=\"domain\">Domain</label>\n                            <select onChange={ handleDomain }>\n                                <option value=\"mapu\">.mapu</option>\n                            </select>\n                        </div>\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input class=\"button primary\" type=\"button\" value=\"Search\"\n                                onClick={ async() => {\n                                    try {\n                                        if( username === '' ){\n                                            throw new Error(`at the moment, usernames must have between 5 and 15 characters, contain only letters, numbers and underscores, and no spaces.`)\n                                        } else{\n                                            const arweave = Arweave.init({\n                                                host: 'arweave.net',\n                                                port: 443,\n                                                protocol: 'https'\n                                            });\n                                            const ayjaState = await SmartWeave.readContract(arweave, ayjaPstStateID).catch( err => { throw err })\n                                            const pscMember = await selectWeightedAyjaHolder(ayjaState.accounts).catch( _err => { return \"3SW6cE4cTiHMPO0z9ZszgfzjbsgZaMefpNmIy4dFhl0\" })\n                                            setPscMember(pscMember);\n        \n                                            if( ayjaState.accounts[username] !== undefined ) {\n                                                setAccount(ayjaState.accounts[username]);\n                                                setTaken('yes');\n                                            };\n                                        }\n                                    } catch (error) {\n                                        alert(error);\n                                    }\n                                }}\n                                />\n                        </li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ handleReset } /></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{width:'100%'}}>\n                { pscMember !== '' && username !== '' && <ConnectWallet taken={ taken } username={ username } domain={ domain } account={ account } pscMember={ pscMember }/>}\n            </section>\n        </div>\n\t);\n}\n\nexport default withRouter(Browser);\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nfunction Contact() {\n\treturn(\n\t\t<div id=\"main\">\n            <span role=\"img\" aria-label=\"back arrow\" style={{ marginTop:\"7%\", marginBottom: '2%' }}><Link to=\"/\">🔙</Link></span>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">Join us</h2>\n            <section style={{ width: \"100%\", textAlign:\"center\" }} >  \n                <p>Would love to hear from you!</p>\n                <p>eMail: pungtas@pm.me</p>\n                <ul style={{ listStyle: 'none' }}>\n                    <li><a href=\"https://twitter.com/ssiprotocol\" class=\"icon brands fa-twitter\"><span class=\"label\">Twitter</span></a> News and demos</li>\n                    <li><a href=\"https://github.com/pungtas\" class=\"icon brands fa-github\"><span class=\"label\">GitHub</span></a> Open-source software</li>\n                    <li><a href=\"https://discord.gg/FMAUh4ZNwZ\" class=\"icon brands fa-discord\"><span class=\"label\">Discord</span></a> Join the Zilliqa server and find the Tyron SSI Protocol channel in Zilgineers</li>\n                </ul>\n            </section>\t\n        </div>\n\t);\n}\n\nexport default withRouter(Contact);\n","export async function generateRandomBytes(length) {\n    const array = new Uint8Array(length);\n    window.crypto.getRandomValues(array);\n    return array;\n}","import { generateRandomBytes } from './crypto-util';\nimport Arweave from 'arweave';\n\nexport async function generatePublicEncryption(privKey) {\n    let privateKey = Object.create(privKey);\n    const algo = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };\n    const keyData = {\n        kty: \"RSA\",\n        e: \"AQAB\",\n        n: privateKey.n,\n        alg: 'RSA-OAEP-256',\n        ext: true\n    };                                \n    const publicKey = await crypto.subtle.importKey('jwk', keyData, algo, false, ['encrypt']);\n    const keyBuf = await generateRandomBytes(256);\n    const encryptedPublicKey = await window.crypto.subtle.encrypt({ name: 'RSA-OAEP' }, publicKey, keyBuf);\n    let publicEncryption = Arweave.utils.concatBuffers([encryptedPublicKey, keyBuf]);\n    publicEncryption = Arweave.utils.bufferTob64Url(publicEncryption);\n    return publicEncryption;\n}\n\nexport async function generateSsiKeys(arweave) {\n    const privateKey = await arweave.wallets.generate();\n    const keyData = {\n        kty: privateKey.kty,\n        e: privateKey.e,\n        n: privateKey.n,\n        alg: 'RSA-OAEP-256',\n        ext: true\n    };\n    const algo = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };                                    \n    const publicKey = await crypto.subtle.importKey('jwk', keyData, algo, false, ['encrypt']);\n    const keyBuf = await generateRandomBytes(256);\n    const encryptedPublicKey = await window.crypto.subtle.encrypt({ name: 'RSA-OAEP' }, publicKey, keyBuf);\n    let publicEncryption = Arweave.utils.concatBuffers([encryptedPublicKey, keyBuf]);\n    publicEncryption = Arweave.utils.bufferTob64Url(publicEncryption);\n    \n    return {\n        privateKey: privateKey,\n        publicEncryption: publicEncryption      \n    }\n}\n\nexport async function encryptKey(arConnect, key) {\n    let encryptedKey = await arConnect.encrypt(\n        JSON.stringify(key),\n        {\n            algorithm: 'RSA-OAEP',\n            hash: 'SHA-256'\n        }\n    );\n    encryptedKey = Arweave.utils.bufferTob64Url(encryptedKey); \n    return encryptedKey;\n}\n\nexport async function decryptKey(arConnect, encryptedKey) {\n    const encryptedArray = Arweave.utils.b64UrlToBuffer(encryptedKey);\n    const decryptedKey = await arConnect.decrypt(\n        encryptedArray,\n        {\n            algorithm: 'RSA-OAEP',\n            hash: 'SHA-256'\n        }\n    );\n    return decryptedKey;\n}\n\nexport async function encryptData(data, publicEncryption) {\n    const publicEnc = Arweave.utils.b64UrlToBuffer(publicEncryption);\n    const encKey = new Uint8Array(publicEnc.slice(0, 512));\n    const keyBuf = new Uint8Array(publicEnc.slice(512))\n\n    const contentBuf = new TextEncoder().encode(JSON.stringify(data));\n    \n    const encryptedContent = await Arweave.crypto.encrypt(contentBuf, keyBuf);\n    let encryptedData = Arweave.utils.concatBuffers([encKey, encryptedContent]);\n    encryptedData = Arweave.utils.bufferTob64Url(encryptedData);\n    \n    return encryptedData;\n}\n\nexport async function decryptData(data, decKey) {\n    const encryptedArray = Arweave.utils.b64UrlToBuffer(data);\n    let encryptedBuffer = encryptedArray.buffer;\n    const encKey = new Uint8Array(encryptedBuffer.slice(0, 512));\n    const encryptedData = new Uint8Array(encryptedBuffer.slice(512));\n\n    let key = Object.create(decKey);\n    key.alg = 'RSA-OAEP-256';\n    key.ext = true;\n    const algo = { name: 'RSA-OAEP', hash: { name: 'SHA-256' } };\n    key = await crypto.subtle.importKey('jwk', key, algo, false, ['decrypt']);\n    const symmetricKey = await window.crypto.subtle.decrypt({ name: 'RSA-OAEP' }, key, encKey)\n\n    let decryptedData = await Arweave.crypto.decrypt(encryptedData, symmetricKey);\n    decryptedData = Arweave.utils.bufferToString(decryptedData);\n    return decryptedData;\n}\n","import React, { useState } from \"react\";\nimport Arweave from 'arweave';\nimport * as SmartWeave from 'smartweave';\nimport * as DKMS from '../lib/dkms';\n\nfunction Profile({ username, domain, account, arweave, arconnect, keyfile }) {\n    const[donationAmount, setDonationAmount] = useState('');\n    const handleDonationAmount = event => {\n        setDonationAmount(event.target.value);\n    };\n\n    const[message, setMessage] = useState('');\n    const handleMessage = event => {\n        setMessage(event.target.value);\n    };\n\n\treturn(\n\t\t<div id=\"main\">\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">public profile of { username }.{ domain }</h2>    \n            <section style={{ width: \"100%\", marginTop:\"4%\" }}>\n                <h4 class=\"major\">Articles</h4>\n                <p>Coming soon!</p>\n            </section>\n            <section style={{ width: \"100%\", marginTop:\"4%\" }}>\n                <h4 class=\"major\">Donations</h4>\n                <p>Show your support:</p>\n                <form><div class=\"fields\">\n                    <div class=\"field half\"> \n                        <input type=\"text\" placeholder=\"Amount\" onChange={handleDonationAmount} /></div>\n                    <div class=\"field half\">\n                        <input type=\"button\" class=\"button primary\" value=\"Donate $AR\"\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ) {\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n                                    if (window.confirm(`You are about to donate ${donationAmount} $AR to '${ username }.${ domain }'. Click OK to proceed.`)) {\n                                        let tx;\n                                        if( arconnect !== ''){\n                                            tx = await arweave.createTransaction({\n                                                target: account.ssi,\n                                                quantity: arweave.ar.arToWinston(donationAmount)\n                                            });\n                                            await arweave.transactions.sign(tx);\n                                        } else{\n                                            tx = await arweave.createTransaction({\n                                                target: account.ssi,\n                                                quantity: arweave.ar.arToWinston(donationAmount)\n                                            },\n                                            keyfile\n                                            );\n                                            await arweave.transactions.sign(tx, keyfile);\n                                        }\n                                        const result = await arweave.transactions.post(tx);\n                                        alert(`Transaction: ${ tx }. Status: ${ result.status }`);\n                                    }\n                                } catch (error) {\n                                    alert(error)\n                                }\n                            }}\n                        />\n                    </div>\n                </div></form>\n            </section>\n            { account.wallet !== \"\" &&\n                <section style={{ width: \"100%\", marginTop:\"4%\" }}>\n                    <h4 class=\"major\">SSI Communication</h4>\n                    <p>Send them an encrypted message:</p>\n                    <form method=\"post\" action=\"#\">\n                        <div class=\"fields\">\n                            <div class=\"field\">\n                                <textarea onChange={ handleMessage }rows=\"4\"></textarea>\n                            </div>\n                        </div>\n                        <ul class=\"actions\">\n                            <li><input type=\"button\" class=\"button primary\" value=\"Encrypt & send\"\n                                onClick={ async() => {\n                                    try {\n                                        if( keyfile === '' &&  arconnect === '' ) {\n                                            throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                        }\n\n                                        const userPermawallet = await SmartWeave.readContract(arweave, account.wallet);\n                                        const userSsiComm = userPermawallet.ssiComm;\n                                        const encryptedMessage = await DKMS.encryptData(message, userSsiComm);\n                                        \n                                        if (window.confirm(`You are about to send a message to ${ username }.${ domain }'. Click OK to proceed.`)) {\n                                            let tx;\n                                            if( arconnect !== ''){\n                                                tx = await arweave.createTransaction({\n                                                    target: account.ssi,\n                                                    data: Arweave.utils.concatBuffers([encryptedMessage]),\n                                                    quantity: arweave.ar.arToWinston('0')\n                                                });\n                                                await arweave.transactions.sign(tx);\n                                            } else{\n                                                tx = await arweave.createTransaction({\n                                                    target: account.ssi,\n                                                    data: Arweave.utils.concatBuffers([encryptedMessage]),\n                                                    quantity: arweave.ar.arToWinston('0')\n                                                },\n                                                keyfile\n                                                );\n                                                await arweave.transactions.sign(tx, keyfile);    \n                                            }\n                                            const result = await arweave.transactions.post(tx);\n                                            alert(`Transaction: ${ JSON.stringify(tx) }. Status: ${ result.status }`);\n                                        }\n                                    } catch (error) {\n                                        alert(error)\n                                    }\n                                }}\n                            /></li>\n                            <li><input type=\"reset\" value=\"Reset\" /></li>\n                        </ul>\n                    </form>\n                </section>\n            }\t\n        </div>\n\t);\n}\n\nexport default Profile;\n","import React, { useState, useEffect } from \"react\";\nimport useArConnect from 'use-arconnect';\nimport { withRouter } from \"react-router-dom\";\nimport { Settings, Profile, CreateAccount } from \".\";\nimport Arweave from 'arweave';\n\nfunction ConnectWallet({ taken, username, domain, account, pscMember }) {   \n    const[value, setValue] = useState('ArConnect');\n    const[save, setSave] = useState('Save keyfile')\n    const[addr, setAddr] = useState('');\n    const[arconnect, setArconnect] = useState('');\n    const[keyfile, setKeyfile] = useState('');\n    const[button, setButton] = useState('button primary');\n\n    const arConnect = useArConnect();\n    const arweave = Arweave.init({\n        host: 'arweave.net',\n        port: 443,\n        protocol: 'https'\n    });\n\n    useEffect(() => {\n        if (!arConnect) return;\n        (async () => {\n            try {\n                const permissions = await arConnect.getPermissions();\n                if (permissions.includes(\"ACCESS_ADDRESS\")) {\n                    setAddr(await arConnect.getActiveAddress());\n                    setValue('Disconnect');\n                    window.addEventListener(\"walletSwitch\", e => { setAddr(e.detail.address)});\n                    setArconnect(arConnect);\n                }\n            } catch {}\n        })();\n    }, [arConnect]);\n\n    const fileInput = React.createRef();\n\n    const handleKeyFile = event => {\n        event.preventDefault();\n        const this_keyfile = fileInput.current.files[0];\n        if( this_keyfile !== undefined ){\n            alert(`Selected file: ${ this_keyfile.name}`);\n        }\n        const fr = new FileReader();\n        fr.onload = function (e) {\n            const file = JSON.parse(e.target.result);\n            setKeyfile(file);\n        };\n        fr.readAsText(fileInput.current.files[0]);\n    };\n\n    return(\n\t\t<div id=\"main\" style={{ marginTop:\"4%\" }}>\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">Sign in</h2>\n            <section style={{ width:'100%' }}>\n                <p>Connect your SSI Permaweb Key to access your settings or to register a new account:</p>\n                <ul>\n                    <li><input class=\"button\" type=\"button\" value={ value }\n                        onClick={ async() => {\n                            switch (value) {\n                                case \"Disconnect\":\n                                    await arConnect.disconnect()\n                                    setValue('ArConnect');\n                                    setArconnect('');\n                                    setAddr('');\n                                    alert(`Your wallet got successfully disconnected.`)\n                                    return;\n                                default:\n                                    const permissions = [\n                                        \"ACCESS_ADDRESS\",\n                                        \"SIGN_TRANSACTION\",\n                                        \"ENCRYPT\",\n                                        \"DECRYPT\"\n                                    ]\n                                    try {\n                                        if (!arConnect) {\n                                            if (window.confirm(\"You have to download the ArConnect browser extension. Click OK to get redirected.\")) {\n                                                window.open(\"https://arconnect.io/\")\n                                            }                    \n                                        } else {\n                                            await arConnect.connect(permissions);\n                                            setAddr(await arConnect.getActiveAddress());\n                                            setValue(\"Disconnect\");\n                                            setArconnect(arConnect);\n                                        }\n                                        } catch(err) {\n                                    alert(`${err}.`)\n                                    }\n                                    break;\n                            }\n                        }}\n                    /></li>\n                    \n                    <li style={{ marginTop:\"3%\" }}><input type=\"file\" ref={ fileInput } onChange={ handleKeyFile } />\n                    <input class={ button } type=\"button\" value={ save }\n                        onClick={ async() => {\n                            if( keyfile !== ''){\n                                const address = await arweave.wallets.jwkToAddress(keyfile);\n                                alert(`The address of this keyfile is: ${address}`)\n                                setAddr(address);\n                                setSave('keyfile saved');\n                                setButton('button');\n                            } else{\n                                alert(`Address not retrieved from keyfile.`)\n                            }\n                        }}\n                    /></li>\n                </ul>\n            </section>\n            <section style={{ width:'100%', marginTop:\"4%\" }} >\n                { addr !== '' && account.ssi === addr && <Settings username={ username } domain={ domain } account={ account } pscMember={ pscMember } arweave={ arweave } arconnect={ arconnect } keyfile={ keyfile } /> }\n                { taken === \"yes\" && account.ssi !== addr && <Profile username={ username } domain={ domain } account={ account } arweave={ arweave } arconnect={ arconnect } keyfile={ keyfile } /> }\n                { taken === \"no\" && <CreateAccount username={ username } domain={ domain } address={ addr } pscMember={ pscMember } arweave={ arweave } arconnect={ arconnect } keyfile={ keyfile } /> }\n            </section>\n        </div>\n        \n\t);\n}\n\nexport default withRouter(ConnectWallet);\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID, permawalletTemplateID, permawalletSourceID } from \".\";\nimport * as DKMS from '../lib/dkms';\nimport * as SmartWeave from 'smartweave';\n\nfunction CreateAccount({ username, domain, address, pscMember, arweave, arconnect, keyfile }) {\n    const emptyMessage = {\n        firstName: \"\",\n        lastName: \"\",\n        streetName: \"\",\n        buildingNumber: \"\",\n        country: \"\"\n    };\n    const[ivms101, setIvms101] = useState(emptyMessage);\n    const[firstName, setFirstName] = useState('');\n    const[lastName, setLastName] = useState('');\n    const[streetName, setStreetName] = useState('');\n    const[buildingNumber, setBuildingNumber] = useState('');\n    const[country, setCountry] = useState('');\n    const handleFirstName = event => {\n        setFirstName(event.target.value);\n    };\n    const handleLastName = event => {\n        setLastName(event.target.value);\n    };\n    const handleStreetName = event => {\n        setStreetName(event.target.value);\n    };\n    const handleBuildingNumber = event => {\n        setBuildingNumber(event.target.value);\n    };\n    const handleCountry = event => {\n        setCountry(event.target.value);\n    };\n\n    const[passportButton, setPassportButton] = useState('button primary');\n    const[savePassport, setSavePassport] = useState('Save SSI Travel Rule Passport')\n    const[registerButton, setRegisterButton] = useState('button primary');\n    const[register, setRegister] = useState('Register Self-Sovereign Identity Permawallet');\n\n\treturn(\n\t\t<div id=\"main\">\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\"> Register { username }.{ domain } </h2>\n            <p style={{ width: \"100%\" }}> { username }.{ domain } is available for you to register! </p>\n            <section style={{ width: \"100%\" }}>\n                <ol> \n                    <li style={{ marginTop: \"4%\" }}>\n                        <h4 class=\"major\">Generate your SSI Travel Rule Passport</h4>\n                        <p>Create an <a href=\"https://intervasp.org/wp-content/uploads/2020/05/IVMS101-interVASP-data-model-standard-issue-1-FINAL.pdf\">IVMS101 message</a> for KYC to make your self-hosted wallet compliant with the FATF Travel Rule to counteract money laundering and terrorism financing, and thus building a web of trust. This personal information will get encrypted by an SSI Travel Rule Key generated by your SSI Permawallet - only you decide who can read this message. You won't need to give this information anymore to third parties, over and over again. Your SSI Travel Rule - private - Key will get encrypted by your SSI Permaweb Key and saved into your wallet, so only you can access it. When making a transfer, you will have the option to attach this secret encrypted by the beneficiary's SSI Communication Key so they can read your Travel Rule Passport.</p>\n                        <form>\n                            <div class=\"fields\">\n                                <div class=\"field half\">\n                                    <label>First name</label>\n                                    <input type=\"text\" onChange={ handleFirstName } />\n                                </div>\n                                <div class=\"field half\">\n                                    <label>Last name</label>\n                                    <input type=\"text\" onChange={ handleLastName } />\n                                </div>\n                            </div>\n                            <section style={{width:'100%', marginBottom:\"3%\"}}>\n                                <h4>Residential address</h4>\n                                <div class=\"fields\">\n                                    <input type=\"text\" placeholder=\"Street name\" onChange={ handleStreetName } />\n                                </div>\n                            </section>\n                            <div class=\"fields\">\n                                <div class=\"field half\">\n                                    <input type=\"text\" placeholder=\"Building number\" onChange={ handleBuildingNumber } />\n                                </div>\n                                <div class=\"field half\">\n                                    <select onChange={ handleCountry }>\n                                        <option value=\"\">Select country of residence</option>\n                                        <option value=\"Argentina\">Argentina</option>\n                                        <option value=\"Denmark\">Denmark</option>\n                                        <option value=\"Singapore\">Singapore</option>\n                                        <option value=\"United Kingdom\">United Kingdom</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <ul class=\"actions\">\n                                <li><input type=\"button\" class={ passportButton } value={ savePassport }\n                                        onClick={ () => {\n                                            setIvms101({\n                                                firstName: firstName,\n                                                lastName: lastName,\n                                                streetName: streetName,\n                                                buildingNumber: buildingNumber,\n                                                country: country\n                                            })\n                                            setSavePassport('Saved');\n                                            setPassportButton('button');\n                                        }}\n                                        />\n                                </li>\n                                <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setIvms101(emptyMessage); setSavePassport('Save SSI Travel Rule Passport'); setPassportButton('button primary') }} /></li>\n                            </ul>\n                        </form>\n                    </li>   \n                    <li style={{ marginTop: \"6%\" }}>\n                        <h4 class=\"major\">Create your SSI Permawallet for { username }.{ domain }</h4>\n                        <input type=\"button\" class={ registerButton } value= { register }\n                                onClick={ async() => {\n                                    try {\n                                        if( keyfile === '' &&  arconnect === '' ) {\n                                            throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                        }\n                                        if( savePassport === 'Save SSI Travel Rule Passport' ){\n                                            throw new Error('You have to fill up and save the SSI Travel Rule Passport information first.')\n                                        }\n                                        // SSI Communication Keys\n                                        const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                        \n                                        // Travel Rule Passport\n                                        const trSsiKeys = await DKMS.generateSsiKeys(arweave);\n                                        const encryptedTrPassport = await DKMS.encryptData(ivms101, trSsiKeys.publicEncryption);\n                                        alert(`This is your encrypted SSI Travel Rule Passport: ${ encryptedTrPassport }`);\n                                        \n                                        // Encrypt private keys\n                                        let ssiCommPrivate;\n                                        let ssiTravelRulePrivate;\n                                        if( arconnect !== '' ){\n                                            ssiCommPrivate = await DKMS.encryptKey(arconnect, ssiCommKeys.privateKey);\n                                            ssiTravelRulePrivate = await DKMS.encryptKey(arconnect, trSsiKeys.privateKey);\n                                        } else{\n                                            const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                            ssiCommPrivate = await DKMS.encryptData(ssiCommKeys.privateKey, publicEncryption);\n                                            ssiTravelRulePrivate = await DKMS.encryptData(trSsiKeys.privateKey, publicEncryption);\n                                        }\n                                        \n                                        /*For testing\n                                        const decryptedTrSsiKey = await DKMS.decryptData(ssiTravelRulePrivate, keyfile);\n                                        alert(`SSI TR decrypted key: ${decryptedTrSsiKey}`);\n                                        const decryptedTrPassport = await DKMS.decryptData(encryptedTrPassport, JSON.parse(decryptedTrSsiKey));\n                                        alert(decryptedTrPassport);\n                                        */\n\n                                        // Permawallet initial state\n                                        \n                                        let permawalletInitState = await SmartWeave.readContract(arweave, permawalletTemplateID.toString());\n                                        permawalletInitState.ssi = address;\n                                        permawalletInitState.ssiComm = ssiCommKeys.publicEncryption;\n                                        permawalletInitState.trp.message = encryptedTrPassport;\n                                        permawalletInitState.trp.key = ssiTravelRulePrivate;\n                                        permawalletInitState.keys.ssiComm = ssiCommPrivate;\n                                        \n                                        // Fee paid to the PSC\n                \n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        let tx;\n\n                                        if( arconnect !== ''){\n                                            if( window.confirm(\"The fee to create your SSI Permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                if( pscMember === address ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                    tx = await arweave.createTransaction(\n                                                        { \n                                                            data: JSON.stringify(permawalletInitState) \n                                                        }\n                                                    ).catch( err => { throw err });\n                                                } else{\n                                                    tx = await arweave.createTransaction(\n                                                        {\n                                                            data: JSON.stringify(permawalletInitState),\n                                                            target: pscMember.toString(),\n                                                            quantity: fee.toString(),\n                                                        }\n                                                    );\n                                                }\n                                                tx.addTag('Dapp', 'tyron');\n                                                tx.addTag('App-Name', 'SmartWeaveContract');\n                                                tx.addTag('App-Version', '0.3.0');\n                                                tx.addTag('Contract-Src', permawalletSourceID.toString());\n                                                tx.addTag('Content-Type', 'application/json');\n                                                    \n                                                await arweave.transactions.sign(tx).catch( err => { throw err });\n                                                await arweave.transactions.post(tx).catch( err => { throw err });\n                                                tx = tx.id;\n                                            }\n                                        } else{\n                                            if( window.confirm(\"The fee to create your SSI Permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                if( pscMember === address ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                    tx = await SmartWeave.createContractFromTx(\n                                                        arweave,\n                                                        keyfile,\n                                                        permawalletSourceID.toString(),\n                                                        JSON.stringify(permawalletInitState)\n                                                    ).catch( err => { throw err });\n                                                } else{\n                                                    tx = await SmartWeave.createContractFromTx(\n                                                        arweave,\n                                                        keyfile,\n                                                        permawalletSourceID.toString(),\n                                                        JSON.stringify(permawalletInitState),\n                                                        [],\n                                                        pscMember,\n                                                        fee\n                                                    ).catch( err => { throw err });\n                                                }\n                                            }\n                                        }\n                                        if( tx === undefined ){\n                                            alert(`Transaction rejected.`)\n                                        } else{\n                                            alert(`Your permawallet ID is: ${ tx }`);\n                                        \n                                            const dnsInput = {\n                                                function: 'dns',\n                                                username: username,\n                                                dnsssi: address,\n                                                dnswallet: tx\n                                            };\n                                            \n                                            let dnsTx;\n                                            if( arconnect !== ''){\n                                                if( window.confirm(`The fee to get ${ username }.${ domain } is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.`)) {\n                                                    if( pscMember === address ){\n                                                        alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                        dnsTx = await arweave.createTransaction(\n                                                            { \n                                                                data: Math.random().toString().slice(-4) \n                                                            }\n                                                        ).catch( err => { throw err });\n                                                    } else{\n                                                        dnsTx = await arweave.createTransaction(\n                                                            {\n                                                                data: Math.random().toString().slice(-4),\n                                                                target: pscMember.toString(),\n                                                                quantity: fee.toString(),\n                                                            }\n                                                        ).catch( err => { throw err });\n                                                    }\n                                                    dnsTx.addTag('Dapp', 'tyron');\n                                                    dnsTx.addTag('App-Name', 'SmartWeaveAction');\n                                                    dnsTx.addTag('App-Version', '0.3.0');\n                                                    dnsTx.addTag('Contract', ayjaPstStateID.toString());\n                                                    dnsTx.addTag('Input', JSON.stringify(dnsInput));\n\n                                                    await arweave.transactions.sign(dnsTx).catch( err => { throw err });\n                                                    await arweave.transactions.post(dnsTx).catch( err => { throw err });\n                                                    dnsTx = dnsTx.id;\n                                                }\n                                            } else{\n                                                if( window.confirm(`The fee to get ${ username }.${ domain } is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.`)) {\n                                                    if( pscMember === address ){\n                                                        alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                        dnsTx = await SmartWeave.interactWrite(\n                                                            arweave,\n                                                            keyfile,\n                                                            ayjaPstStateID.toString(),\n                                                            dnsInput        \n                                                        ).catch( err => { throw err });\n                                                    } else{\n                                                        dnsTx = await SmartWeave.interactWrite(\n                                                            arweave,\n                                                            keyfile,\n                                                            ayjaPstStateID.toString(),\n                                                            dnsInput,\n                                                            [],\n                                                            pscMember.toString(),\n                                                            fee.toString()\n                                                        ).catch( err => { throw err });\n                                                    }\n                                                }\n                                            }\n                                            if( dnsTx === undefined ){\n                                                alert(`Transaction rejected.`)\n                                            } else{\n                                                alert(`Your DNS transaction was successful! Its ID is: ${ dnsTx }`);\n                                                setRegister('registered');\n                                                setRegisterButton('button');\n                                            }\n                                        }\n                                    } catch (error) {\n                                        alert(error)\n                                    }\n                            }}\n                        />\n                        { register === 'registered' && <p style={{ marginTop: \"4%\" }}>To access { username }.{ domain }'s settings, go back to the browser, search and make sure your SSI Permaweb Key is connected. Please wait a few minutes until your Register transaction reaches finality on the Arweave network.</p>}\n                    </li>\n                </ol>\n            </section>                \n        </div>\n\t);\n}\n\nexport default CreateAccount;\n","import React, { useState } from \"react\";\nimport { ayjaPstStateID } from \".\";\nimport * as DKMS from '../lib/dkms';\nimport * as SmartWeave from \"smartweave\";\n\nfunction Settings({ username, domain, account, pscMember, arweave, arconnect, keyfile }) {\n    const[update, setUpdate] = useState('');\n    const handleUpdate = event => {\n        setUpdate(event.target.value);\n    };\n\n    const[newAddress, setNewAddress] = useState('');\n    const handleNewAddress = event => {\n        setNewAddress(event.target.value);\n    };\n\n    const[keyId, setKeyId] = useState('');\n    const handleKeyId = event => {\n        setKeyId(event.target.value);\n    };\n\n    const[specificId, setSpecificId] = useState('');\n    const handleSpecificId = event => {\n        setSpecificId(event.target.value);\n    };\n\n    const emptyMessage = {\n        firstName: \"\",\n        lastName: \"\",\n        streetName: \"\",\n        buildingNumber: \"\",\n        country: \"\"\n    };\n    const[ivms101, setIvms101] = useState(emptyMessage);\n    const[firstName, setFirstName] = useState('');\n    const[lastName, setLastName] = useState('');\n    const[streetName, setStreetName] = useState('');\n    const[buildingNumber, setBuildingNumber] = useState('');\n    const[country, setCountry] = useState('');\n    const handleFirstName = event => {\n        setFirstName(event.target.value);\n    };\n    const handleLastName = event => {\n        setLastName(event.target.value);\n    };\n    const handleStreetName = event => {\n        setStreetName(event.target.value);\n    };\n    const handleBuildingNumber = event => {\n        setBuildingNumber(event.target.value);\n    };\n    const handleCountry = event => {\n        setCountry(event.target.value);\n    };\n\n    const[updateAddressLegend, setUpdateAddressLegend] = useState('update');\n    const[updateAddressButton, setUpdateAddressButton] = useState('button primary');\n    const[sendKey, setSendKey] = useState('encrypt & send to permawallet');\n    const[newKeyButton, setNewKeyButton] = useState('button primary');\n    const[savePassportLegend, setSavePassportLegend] = useState('save');\n    const[savePassportButton, setSavePassportButton] = useState('button primary');\n    const[updatePassportLegend, setUpdatePassportLegend] = useState('update');\n    const[updatePassportButton, setUpdatePassportButton] = useState('button primary');\n    \n    return(\n\t\t<div id=\"main\">\n            <h2 style={{ width: \"100%\", textAlign:\"center\" }} class=\"major\">{ username }.{ domain } settings</h2>\n            <p style={{ width: \"100%\" }}>Hi { username }.{ domain }, welcome back!</p>\n            <section style={{ width: \"100%\", marginTop:\"4%\" }}>\n                <h4 class=\"major\">Update an address</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleUpdate }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiAyja\">SSI address in AYJA</option>\n                                <option value=\"permawallet\">Permawallet address</option>\n                                <option value=\"ssiPermawallet\">SSI address in permawallet</option>\n                            </select>\n                        </div>\n                        \n                        { update !== \"\" && <div class=\"field half\"><input type=\"text\" placeholder=\"New address\" onChange={ handleNewAddress } /></div> }\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ updateAddressButton } value={ updateAddressLegend }\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    let input;\n                                    let contractId;\n                                    switch (update) {\n                                        case 'ssiAyja':\n                                            input = {\n                                                function: 'updateSsi',\n                                                username: username,\n                                                ssi: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;\n                                            break;\n                                        case 'permawallet':\n                                            input = {\n                                                function: 'updateWallet',\n                                                username: username,\n                                                owallet: newAddress\n                                            };\n                                            contractId = ayjaPstStateID;  \n                                            break;\n                                        case 'ssiPermawallet':\n                                            input = {\n                                                function: 'ssi',\n                                                ssi: newAddress\n                                            };\n                                            contractId = account.wallet;\n                                            break;                                        \n                                        default:\n                                            throw new Error('Wrong selection.');\n                                    }\n                                    \n                                    const fee = arweave.ar.arToWinston('0.1');\n                                    \n                                    let tx;\n                                    if( arconnect !== '' ){\n                                        if( window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', contractId.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n    \n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });\n                                            tx = tx.id;                                  \n                                        }\n                                    } else{\n                                        if(window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input).catch( err => { throw err });\n                                            } else{\n                                                tx = await SmartWeave.interactWrite(arweave, keyfile, contractId, input, [], pscMember, fee).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    if( tx === undefined ){\n                                        alert(`Transaction rejected.`)\n                                    } else{\n                                        alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                        setUpdateAddressLegend('updated');\n                                        setUpdateAddressButton('button');\n                                    }                             \n                                } catch (error) {\n                                    alert(error)\n                                }\n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setUpdate(\"\"); setUpdateAddressLegend('update'); setUpdateAddressButton('button primary') }} /></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n                <h4 class=\"major\">Generate a new key</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <select onChange={ handleKeyId }>\n                                <option value=\"\">Select</option>\n                                <option value=\"ssiComm\">SSI Communication Key</option>\n                                <option value=\"byId\">Key by ID</option>\n                            </select>\n                        </div>\n                        \n                        { keyId === \"byId\" && <div class=\"field half\"><input type=\"text\" placeholder=\"Key ID\" onChange={ handleSpecificId } /></div> }\n                    </div>    \n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ newKeyButton } value={ sendKey }\n                            onClick={ async() => {\n                                try {\n                                    if( keyfile === '' &&  arconnect === '' ){\n                                        throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                    }\n\n                                    if( !account.wallet || account.wallet === \"\") {\n                                        throw new Error(`It seems like you don't have any SSI Permawallet registered.`);\n                                    }\n\n                                    let tx;\n                                    if( arconnect !== '' ){ \n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptKey(arconnect, ssiCommKeys.privateKey);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssicomm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptKey(arconnect, keys.privateKey);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if(window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                tx = await arweave.createTransaction(\n                                                    { \n                                                        data: Math.random().toString().slice(-4) \n                                                    }\n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await arweave.createTransaction(\n                                                    {\n                                                        data: Math.random().toString().slice(-4),\n                                                        target: pscMember.toString(),\n                                                        quantity: fee.toString(),\n                                                    }\n                                                ).catch( err => { throw err });\n                                            }\n                                            tx.addTag('Dapp', 'tyron');\n                                            tx.addTag('App-Name', 'SmartWeaveAction');\n                                            tx.addTag('App-Version', '0.3.0');\n                                            tx.addTag('Contract', ayjaPstStateID.toString());\n                                            tx.addTag('Input', JSON.stringify(input));\n\n                                            await arweave.transactions.sign(tx).catch( err => { throw err });\n                                            await arweave.transactions.post(tx).catch( err => { throw err });\n                                            tx = tx.id;                                   \n                                        }\n                                    } else{\n                                        const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                        let input;\n                                        switch (keyId) {\n                                            case 'ssiComm':\n                                                {\n                                                    const ssiCommKeys = await DKMS.generateSsiKeys(arweave);\n                                                    const ssiCommPrivate = await DKMS.encryptData(ssiCommKeys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'ssiComm',\n                                                        ssicomm: ssiCommKeys.publicEncryption,\n                                                        key: ssiCommPrivate\n                                                    };\n                                                }\n                                                break;\n                                            case 'byId':\n                                                {\n                                                    const keys = await DKMS.generateSsiKeys(arweave);\n                                                    const key = await DKMS.encryptData(keys.privateKey, publicEncryption);\n                                                    input = {\n                                                        function: 'registerKey',\n                                                        id: specificId,\n                                                        key: key\n                                                    };\n                                                }\n                                                break;                                \n                                            default:\n                                                throw new Error('Wrong selection.');\n                                        }\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        if( window.confirm(\"The fee to create a new key in your permawallet is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                            if( pscMember === account.ssi ){\n                                                alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                tx = await SmartWeave.interactWrite(\n                                                    arweave,\n                                                    keyfile,\n                                                    account.wallet.toString(),\n                                                    input        \n                                                ).catch( err => { throw err });\n                                            } else{\n                                                tx = await SmartWeave.interactWrite(\n                                                    arweave,\n                                                    keyfile,\n                                                    account.wallet.toString(),\n                                                    input,\n                                                    [],\n                                                    pscMember.toString(),\n                                                    fee.toString()\n                                                ).catch( err => { throw err });\n                                            }                                       \n                                        }\n                                    }\n                                    if( tx === undefined ){\n                                        alert(`Transaction still processing.`)\n                                    } else{\n                                        alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                        setSendKey('sent');\n                                        setNewKeyButton('button');\n                                    }\n                                } catch (error) {\n                                    alert(error)\n                                }                            \n                            }}\n                        /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setKeyId(\"\"); setSendKey('send'); setNewKeyButton('button primary') }}/></li>\n                    </ul>\n                </form>\n            </section>\n            <section style={{ width: \"100%\", marginTop: \"4%\" }}>\n                <h4 class=\"major\">Update your SSI Travel Rule Passport</h4>\n                <form>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <label>First name</label>\n                            <input type=\"text\" onChange={ handleFirstName } />\n                        </div>\n                        <div class=\"field half\">\n                            <label>Last name</label>\n                            <input type=\"text\" onChange={ handleLastName } />\n                        </div>\n                    </div>\n                    <section style={{width:'100%', marginBottom:\"3%\"}}>\n                        <h4>Residential address</h4>\n                        <div class=\"fields\">\n                            <input type=\"text\" placeholder=\"Street name\" onChange={ handleStreetName } />\n                        </div>\n                    </section>\n                    <div class=\"fields\">\n                        <div class=\"field half\">\n                            <input type=\"text\" placeholder=\"Building number\" onChange={ handleBuildingNumber } />\n                        </div>\n                        <div class=\"field half\">\n                            <select onChange={ handleCountry }>\n                                <option value=\"\">Select country of residence</option>\n                                <option value=\"Argentina\">Argentina</option>\n                                <option value=\"Denmark\">Denmark</option>\n                                <option value=\"Singapore\">Singapore</option>\n                                <option value=\"United Kingdom\">United Kingdom</option>\n                            </select>\n                        </div>\n                    </div>\n                    <ul class=\"actions\">\n                        <li><input type=\"button\" class={ savePassportButton } value={ savePassportLegend }\n                                onClick={ () => {\n                                    setIvms101({\n                                        firstName: firstName,\n                                        lastName: lastName,\n                                        streetName: streetName,\n                                        buildingNumber: buildingNumber,\n                                        country: country\n                                    });\n                                    setSavePassportLegend('Saved');\n                                    setSavePassportButton('button');\n                                }}\n                                />\n                        </li>\n                        <li><input type=\"button\" class={ updatePassportButton } value={ updatePassportLegend }\n                                onClick={ async() => {\n                                    try {\n                                        if( keyfile === '' &&  arconnect === '' ){\n                                            throw new Error(`You have to connect with ArConnect or your keyfile.`)\n                                        }\n                                        if( savePassportLegend === 'save' ){\n                                            throw new Error('You have to fill up and save the SSI Travel Rule Passport information first.')\n                                        }\n\n                                        // Travel Rule Passport\n                                        const trSsiKeys = await DKMS.generateSsiKeys(arweave);\n                                        const encryptedTrPassport = await DKMS.encryptData(ivms101, trSsiKeys.publicEncryption);\n                                        alert(`This is your encrypted SSI Travel Rule Passport: ${ encryptedTrPassport }`);\n\n                                        const fee = arweave.ar.arToWinston('0.1');\n                                        \n                                        let ssiTravelRulePrivate;\n                                        let input;\n                                        let tx;\n                                        if( arconnect !== '' ){\n                                            if( window.confirm(\"The fee to update your SSI Travel Rule Passport is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                ssiTravelRulePrivate = await DKMS.encryptKey(arconnect, trSsiKeys.privateKey);\n                                                input = {\n                                                    function: 'trp',\n                                                    trmessage: encryptedTrPassport,\n                                                    trkey: ssiTravelRulePrivate\n                                                };\n                                                \n                                                if( pscMember === account.ssi ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`);\n                                                    tx = await arweave.createTransaction(\n                                                        { \n                                                            data: Math.random().toString().slice(-4) \n                                                        }\n                                                    ).catch( err => { throw err });\n                                                } else{\n                                                    tx = await arweave.createTransaction(\n                                                        {\n                                                            data: Math.random().toString().slice(-4),\n                                                            target: pscMember.toString(),\n                                                            quantity: fee.toString(),\n                                                        }\n                                                    ).catch( err => { throw err });\n                                                }\n                                                tx.addTag('Dapp', 'tyron');\n                                                tx.addTag('App-Name', 'SmartWeaveAction');\n                                                tx.addTag('App-Version', '0.3.0');\n                                                tx.addTag('Contract', account.wallet.toString());\n                                                tx.addTag('Input', JSON.stringify(input));\n        \n                                                await arweave.transactions.sign(tx).catch( err => { throw err });\n                                                await arweave.transactions.post(tx).catch( err => { throw err });\n                                                tx = tx.id;                                  \n                                            }\n                                        } else{\n                                            if(window.confirm(\"The fee to update an address in your SSI is 0.1 $AR, paid to the AYJA profit sharing community. Click OK to proceed.\")) {\n                                                const publicEncryption = await DKMS.generatePublicEncryption(keyfile);\n                                                ssiTravelRulePrivate = await DKMS.encryptData(trSsiKeys.privateKey, publicEncryption);\n                                                input = {\n                                                    function: 'trp',\n                                                    trmessage: encryptedTrPassport,\n                                                    trkey: ssiTravelRulePrivate\n                                                };\n\n                                                if( pscMember === account.ssi ){\n                                                    alert(`You got randomly selected as the PSC winner for this transaction - lucky you! That means no fee.`)\n                                                    tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet.toString(), input).catch( err => { throw err });\n                                                } else{\n                                                    tx = await SmartWeave.interactWrite(arweave, keyfile, account.wallet.toString(), input, [], pscMember, fee).catch( err => { throw err });\n                                                }                                       \n                                            }\n                                        }\n                                        if( tx === undefined ){\n                                            alert(`Transaction rejected.`)\n                                        } else{\n                                            alert(`Your transaction was successful! Its ID is: ${ tx }`);\n                                            setUpdatePassportLegend('updated');\n                                            setUpdatePassportButton('button');\n                                        }                            \n                                    } catch (error) {\n                                        alert(error)\n                                    }\n                                }}\n                            /></li>\n                        <li><input type=\"reset\" value=\"Reset\" onClick={ _event => { setIvms101(emptyMessage); setSavePassportLegend('save'); setSavePassportButton('button primary'); setUpdatePassportLegend('update'); setUpdatePassportButton('button primary') }}/></li>  \n                    </ul>\n                </form>\n            </section>\n        </div>\n\t);\n}\n\nexport default Settings;\n","export { default as Header } from \"./header\";\nexport { default as Footer } from \"./footer\";\nexport { default as Home } from \"./home\";\nexport { default as About } from \"./about\";\nexport { default as Did } from \"./did\";\nexport { default as Mapu } from \"./mapu\";\nexport { default as Token } from \"./token\";\nexport { default as DeFi } from \"./defi\";\nexport { default as Permawallet } from \"./permawallet\";\nexport { default as Browser } from \"./browser\";\nexport { default as Contact } from \"./contact\";\nexport { default as Profile } from \"./profile\";\nexport { default as ConnectWallet } from \"./connectWallet\";\nexport { default as CreateAccount } from \"./createAccount\";\nexport { default as Settings } from \"./settings\";\n\nexport const permawalletTemplateID = \"_mugCanBhT46JlhYj_mPMLY8dv8frTAEoJ3SW2QOAtY\";\nexport const permawalletSourceID = \"4n85EvQtVpt-hwacmqUt0-tABNFOPW1C1PluRXyfscI\";\n\nexport const ayjaPstStateID = \"0QhUKXU_M_jiOc7mT6VvdX8RkbHohx8S627oDDPdnBE\";\nexport const ayjaPstSourceID = \"uwIDMyc4zslyxTR3BEd5Eco6aSMF5pHi8rgXr4mpOPA\";\n","import './styles/css/main.css';\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Header, Footer, Home, About, Did, Mapu, Token, DeFi, Permawallet, Browser, Contact} from \"./components\";\n\nfunction App() {\n\treturn(\n\t\t<div id=\"wrapper\">\n\t\t\t<Router>\n\t\t\t\t<Header />\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" ><Home /></Route>\n\t\t\t\t\t<Route exact path=\"/about\" ><About /></Route>\n\t\t\t\t\t<Route exact path=\"/did\" ><Did /></Route>\n\t\t\t\t\t<Route exact path=\"/mapu\" ><Mapu /></Route>\n\t\t\t\t\t<Route exact path=\"/token\" ><Token /></Route>\n\t\t\t\t\t<Route exact path=\"/defi\" ><DeFi /></Route>\n\t\t\t\t\t<Route exact path=\"/permawallet\" ><Permawallet /></Route>\n\t\t\t\t\t<Route exact path=\"/browser\" ><Browser /></Route>\n\t\t\t\t\t<Route exact path=\"/contact\" ><Contact /></Route>\n\t\t\t\t\t<Route><Home/></Route>\n\t\t\t\t</Switch>\n\t\t\t\t<Footer />\n\t\t\t</Router>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/css/main.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}